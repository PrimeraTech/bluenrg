
SensorDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003398  08003398  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000080  08003428  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000042c  08003428  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_line   00008fcf  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000239e4  00000000  00000000  00029079  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003da6  00000000  00000000  0004ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e38  00000000  00000000  00050808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010d8  00000000  00000000  00051640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00008fa2  00000000  00000000  00052718  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006589  00000000  00000000  0005b6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00061c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  00061cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003318 	.word	0x08003318

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08003318 	.word	0x08003318

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004de:	e003      	b.n	80004e8 <LoopCopyDataInit>

080004e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004e6:	3104      	adds	r1, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <LoopForever+0xe>)
	adds	r2, r0, r1
 80004ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004f0:	d3f6      	bcc.n	80004e0 <CopyDataInit>
	ldr	r2, =_sbss
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004f4:	e002      	b.n	80004fc <LoopFillZerobss>

080004f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004f8:	f842 3b04 	str.w	r3, [r2], #4

080004fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <LoopForever+0x16>)
	cmp	r2, r3
 80004fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000500:	d3f9      	bcc.n	80004f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000502:	f001 f8db 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f002 fe0f 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050a:	f000 f869 	bl	80005e0 <main>

0800050e <LoopForever>:

LoopForever:
    b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000514:	080033a8 	.word	0x080033a8
	ldr	r0, =_sdata
 8000518:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800051c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000520:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000524:	2000042c 	.word	0x2000042c

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>

0800052a <HAL_GPIO_EXTI_Callback>:
 * @param  Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  HCI_Isr();
 800052a:	f002 bbb7 	b.w	8002c9c <HCI_Isr>

0800052e <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
  void SystemClock_Config(void)
{
 800052e:	b510      	push	{r4, lr}
 8000530:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	2214      	movs	r2, #20
 8000534:	2100      	movs	r1, #0
 8000536:	4668      	mov	r0, sp
 8000538:	f002 fe25 	bl	8003186 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053c:	2244      	movs	r2, #68	; 0x44
 800053e:	2100      	movs	r1, #0
 8000540:	a805      	add	r0, sp, #20
 8000542:	f002 fe20 	bl	8003186 <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000546:	2310      	movs	r3, #16
 8000548:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800054c:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000550:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000552:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000554:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000556:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000558:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
 800055c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800055e:	2404      	movs	r4, #4
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000564:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 7;
 8000566:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000568:	9414      	str	r4, [sp, #80]	; 0x50
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f001 fb23 	bl	8001bb4 <HAL_RCC_OscConfig>
 800056e:	b100      	cbz	r0, 8000572 <SystemClock_Config+0x44>
 8000570:	e7fe      	b.n	8000570 <SystemClock_Config+0x42>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	220f      	movs	r2, #15
 8000574:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8000578:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 800057a:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057c:	4621      	mov	r1, r4
 800057e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	e88d 000c 	stmia.w	sp, {r2, r3}
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000584:	f001 fd48 	bl	8002018 <HAL_RCC_ClockConfig>
 8000588:	b100      	cbz	r0, 800058c <SystemClock_Config+0x5e>
 800058a:	e7fe      	b.n	800058a <SystemClock_Config+0x5c>
  {
    /* Initialization Error */
    while(1);
  } 
}
 800058c:	b016      	add	sp, #88	; 0x58
 800058e:	bd10      	pop	{r4, pc}

08000590 <User_Process>:
 *
 * @param  AxesRaw_t* p_axes
 * @retval None
 */
void User_Process(AxesRaw_t* p_axes)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  if(set_connectable){
 8000592:	4d11      	ldr	r5, [pc, #68]	; (80005d8 <User_Process+0x48>)
 8000594:	782b      	ldrb	r3, [r5, #0]
{
 8000596:	4604      	mov	r4, r0
  if(set_connectable){
 8000598:	b11b      	cbz	r3, 80005a2 <User_Process+0x12>
    setConnectable();
 800059a:	f000 fb85 	bl	8000ca8 <setConnectable>
    set_connectable = FALSE;
 800059e:	2300      	movs	r3, #0
 80005a0:	702b      	strb	r3, [r5, #0]
  }  

  /* Check if the user has pushed the button */
  if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 ff5c 	bl	8001460 <BSP_PB_GetState>
 80005a8:	b9a8      	cbnz	r0, 80005d6 <User_Process+0x46>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 ff58 	bl	8001460 <BSP_PB_GetState>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d0fa      	beq.n	80005aa <User_Process+0x1a>
    
    //BSP_LED_Toggle(LED2); //used for debugging (BSP_LED_Init() above must be also enabled)
    
    if(connected)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <User_Process+0x4c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	b16b      	cbz	r3, 80005d6 <User_Process+0x46>
    {
      /* Update acceleration data */
      p_axes->AXIS_X += 100;
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	3364      	adds	r3, #100	; 0x64
 80005be:	6023      	str	r3, [r4, #0]
      p_axes->AXIS_Y += 100;
 80005c0:	6863      	ldr	r3, [r4, #4]
 80005c2:	3364      	adds	r3, #100	; 0x64
 80005c4:	6063      	str	r3, [r4, #4]
      p_axes->AXIS_Z += 100;
 80005c6:	68a3      	ldr	r3, [r4, #8]
 80005c8:	3364      	adds	r3, #100	; 0x64
 80005ca:	60a3      	str	r3, [r4, #8]
      //PRINTF("ACC: X=%6d Y=%6d Z=%6d\r\n", p_axes->AXIS_X, p_axes->AXIS_Y, p_axes->AXIS_Z);
      Acc_Update(p_axes);
 80005cc:	4620      	mov	r0, r4
    }
  }
}
 80005ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Acc_Update(p_axes);
 80005d2:	f000 b94d 	b.w	8000870 <Acc_Update>
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
 80005d8:	20000000 	.word	0x20000000
 80005dc:	200000a0 	.word	0x200000a0

080005e0 <main>:
{
 80005e0:	b510      	push	{r4, lr}
  uint8_t SERVER_BDADDR[] = {0x12, 0x34, 0x00, 0xE1, 0x80, 0x03};
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <main+0xf4>)
 80005e4:	4c3c      	ldr	r4, [pc, #240]	; (80006d8 <main+0xf8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	889b      	ldrh	r3, [r3, #4]
{
 80005ea:	b08c      	sub	sp, #48	; 0x30
  uint8_t SERVER_BDADDR[] = {0x12, 0x34, 0x00, 0xE1, 0x80, 0x03};
 80005ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80005f0:	9008      	str	r0, [sp, #32]
  HAL_Init();
 80005f2:	f001 f897 	bl	8001724 <HAL_Init>
  BSP_LED_Init(LED2); 
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fec0 	bl	800137c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4608      	mov	r0, r1
 8000600:	f000 feec 	bl	80013dc <BSP_PB_Init>
  SystemClock_Config();
 8000604:	f7ff ff93 	bl	800052e <SystemClock_Config>
  BNRG_SPI_Init();
 8000608:	f000 ff36 	bl	8001478 <BNRG_SPI_Init>
  HCI_Init();
 800060c:	f002 fb18 	bl	8002c40 <HCI_Init>
  BlueNRG_RST();
 8000610:	f000 ff50 	bl	80014b4 <BlueNRG_RST>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000614:	f10d 011e 	add.w	r1, sp, #30
 8000618:	f10d 0017 	add.w	r0, sp, #23
 800061c:	f002 fad9 	bl	8002bd2 <getBlueNRGVersion>
  BlueNRG_RST();
 8000620:	f000 ff48 	bl	80014b4 <BlueNRG_RST>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000624:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000628:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 800062a:	bf84      	itt	hi
 800062c:	2301      	movhi	r3, #1
 800062e:	7023      	strbhi	r3, [r4, #0]
  Osal_MemCpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000630:	f04f 0206 	mov.w	r2, #6
    SERVER_BDADDR[5] = 0x02;
 8000634:	bf88      	it	hi
 8000636:	2302      	movhi	r3, #2
  Osal_MemCpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000638:	a908      	add	r1, sp, #32
 800063a:	a80a      	add	r0, sp, #40	; 0x28
    SERVER_BDADDR[5] = 0x02;
 800063c:	bf88      	it	hi
 800063e:	f88d 3025 	strbhi.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000642:	f002 fd50 	bl	80030e6 <Osal_MemCpy>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000646:	aa0a      	add	r2, sp, #40	; 0x28
 8000648:	2106      	movs	r1, #6
 800064a:	2000      	movs	r0, #0
 800064c:	f002 fa69 	bl	8002b22 <aci_hal_write_config_data>
  ret = aci_gatt_init();    
 8000650:	f002 f8ae 	bl	80027b0 <aci_gatt_init>
  if (bnrg_expansion_board == IDB05A1) {
 8000654:	7820      	ldrb	r0, [r4, #0]
 8000656:	2801      	cmp	r0, #1
 8000658:	ab07      	add	r3, sp, #28
 800065a:	f10d 021a 	add.w	r2, sp, #26
 800065e:	d113      	bne.n	8000688 <main+0xa8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000660:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000664:	2100      	movs	r1, #0
 8000666:	ab06      	add	r3, sp, #24
 8000668:	2207      	movs	r2, #7
 800066a:	f001 ff80 	bl	800256e <aci_gap_init_IDB05A1>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <main+0xfc>)
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8000678:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800067c:	2307      	movs	r3, #7
 800067e:	f002 f9e7 	bl	8002a50 <aci_gatt_update_char_value>
  if(ret){
 8000682:	4602      	mov	r2, r0
 8000684:	b128      	cbz	r0, 8000692 <main+0xb2>
 8000686:	e7fe      	b.n	8000686 <main+0xa6>
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000688:	a906      	add	r1, sp, #24
 800068a:	2001      	movs	r0, #1
 800068c:	f001 ffae 	bl	80025ec <aci_gap_init_IDB04A1>
 8000690:	e7ed      	b.n	800066e <main+0x8e>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <main+0x100>)
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2401      	movs	r4, #1
 8000698:	2310      	movs	r3, #16
 800069a:	4601      	mov	r1, r0
 800069c:	9403      	str	r4, [sp, #12]
 800069e:	9001      	str	r0, [sp, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4620      	mov	r0, r4
 80006a4:	2307      	movs	r3, #7
 80006a6:	f002 f845 	bl	8002734 <aci_gap_set_auth_requirement>
  ret = Add_Acc_Service();
 80006aa:	f000 f81d 	bl	80006e8 <Add_Acc_Service>
  ret = Add_Environmental_Sensor_Service();
 80006ae:	f000 f907 	bl	80008c0 <Add_Environmental_Sensor_Service>
  ret = Add_Time_Service(); 
 80006b2:	f000 fb8d 	bl	8000dd0 <Add_Time_Service>
  ret = Add_LED_Service();
 80006b6:	f000 fcbd 	bl	8001034 <Add_LED_Service>
  ret = aci_hal_set_tx_power_level(1,4);
 80006ba:	4620      	mov	r0, r4
 80006bc:	2104      	movs	r1, #4
 80006be:	f002 fa62 	bl	8002b86 <aci_hal_set_tx_power_level>
    User_Process(&axes_data);
 80006c2:	4c08      	ldr	r4, [pc, #32]	; (80006e4 <main+0x104>)
    HCI_Process();
 80006c4:	f002 fb1e 	bl	8002d04 <HCI_Process>
    User_Process(&axes_data);
 80006c8:	4620      	mov	r0, r4
 80006ca:	f7ff ff61 	bl	8000590 <User_Process>
    Update_Time_Characteristics();
 80006ce:	f000 fca9 	bl	8001024 <Update_Time_Characteristics>
 80006d2:	e7f7      	b.n	80006c4 <main+0xe4>
 80006d4:	08003330 	.word	0x08003330
 80006d8:	2000009c 	.word	0x2000009c
 80006dc:	08003388 	.word	0x08003388
 80006e0:	0001e240 	.word	0x0001e240
 80006e4:	200000a8 	.word	0x200000a8

080006e8 <Add_Acc_Service>:
 *
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_Acc_Service(void)
{
 80006e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ec:	b08b      	sub	sp, #44	; 0x2c
  tBleStatus ret;

  uint8_t uuid[16];
  
  COPY_ACC_SERVICE_UUID(uuid);
 80006ee:	2300      	movs	r3, #0
 80006f0:	f88d 301d 	strb.w	r3, [sp, #29]
 80006f4:	23b4      	movs	r3, #180	; 0xb4
 80006f6:	f88d 301e 	strb.w	r3, [sp, #30]
 80006fa:	239a      	movs	r3, #154	; 0x9a
 80006fc:	f88d 301f 	strb.w	r3, [sp, #31]
 8000700:	233a      	movs	r3, #58	; 0x3a
 8000702:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8000706:	f06f 0330 	mvn.w	r3, #48	; 0x30
 800070a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800070e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000712:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000716:	236e      	movs	r3, #110	; 0x6e
 8000718:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800071c:	f04f 0336 	mov.w	r3, #54	; 0x36
 8000720:	2402      	movs	r4, #2
 8000722:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000726:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <Add_Acc_Service+0x17c>)
 8000728:	9300      	str	r3, [sp, #0]
  COPY_ACC_SERVICE_UUID(uuid);
 800072a:	251b      	movs	r5, #27
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 800072c:	2307      	movs	r3, #7
  COPY_ACC_SERVICE_UUID(uuid);
 800072e:	f04f 0bc5 	mov.w	fp, #197	; 0xc5
 8000732:	f04f 0ad5 	mov.w	sl, #213	; 0xd5
 8000736:	f04f 09a5 	mov.w	r9, #165	; 0xa5
 800073a:	f04f 08e1 	mov.w	r8, #225	; 0xe1
 800073e:	2711      	movs	r7, #17
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000740:	2201      	movs	r2, #1
 8000742:	a906      	add	r1, sp, #24
 8000744:	4620      	mov	r0, r4
  COPY_ACC_SERVICE_UUID(uuid);
 8000746:	f88d 5018 	strb.w	r5, [sp, #24]
 800074a:	f88d b019 	strb.w	fp, [sp, #25]
 800074e:	f88d a01a 	strb.w	sl, [sp, #26]
 8000752:	f88d 901b 	strb.w	r9, [sp, #27]
 8000756:	f88d 401c 	strb.w	r4, [sp, #28]
 800075a:	f88d 8020 	strb.w	r8, [sp, #32]
 800075e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8000762:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000766:	f002 f842 	bl	80027ee <aci_gatt_add_serv>
                          &accServHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 800076a:	4603      	mov	r3, r0
 800076c:	2800      	cmp	r0, #0
 800076e:	d175      	bne.n	800085c <Add_Acc_Service+0x174>
  
  COPY_FREE_FALL_UUID(uuid);
 8000770:	22fc      	movs	r2, #252	; 0xfc
 8000772:	f88d 201e 	strb.w	r2, [sp, #30]
 8000776:	228f      	movs	r2, #143	; 0x8f
 8000778:	f88d 201f 	strb.w	r2, [sp, #31]
 800077c:	224a      	movs	r2, #74	; 0x4a
 800077e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8000782:	f06f 0230 	mvn.w	r2, #48	; 0x30
 8000786:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800078a:	22a0      	movs	r2, #160	; 0xa0
 800078c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8000790:	2278      	movs	r2, #120	; 0x78
 8000792:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8000796:	223e      	movs	r2, #62	; 0x3e
 8000798:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 800079c:	22e2      	movs	r2, #226	; 0xe2
 800079e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  ret =  aci_gatt_add_char(accServHandle, UUID_TYPE_128, uuid, 1,
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <Add_Acc_Service+0x17c>)
  COPY_FREE_FALL_UUID(uuid);
 80007a4:	f88d 001d 	strb.w	r0, [sp, #29]
  ret =  aci_gatt_add_char(accServHandle, UUID_TYPE_128, uuid, 1,
 80007a8:	2610      	movs	r6, #16
 80007aa:	8810      	ldrh	r0, [r2, #0]
 80007ac:	4a2e      	ldr	r2, [pc, #184]	; (8000868 <Add_Acc_Service+0x180>)
 80007ae:	9205      	str	r2, [sp, #20]
 80007b0:	9304      	str	r3, [sp, #16]
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	9603      	str	r6, [sp, #12]
 80007b8:	2301      	movs	r3, #1
 80007ba:	9600      	str	r6, [sp, #0]
 80007bc:	aa06      	add	r2, sp, #24
 80007be:	4621      	mov	r1, r4
  COPY_FREE_FALL_UUID(uuid);
 80007c0:	f88d 5018 	strb.w	r5, [sp, #24]
 80007c4:	f88d b019 	strb.w	fp, [sp, #25]
 80007c8:	f88d a01a 	strb.w	sl, [sp, #26]
 80007cc:	f88d 901b 	strb.w	r9, [sp, #27]
 80007d0:	f88d 401c 	strb.w	r4, [sp, #28]
 80007d4:	f88d 8020 	strb.w	r8, [sp, #32]
 80007d8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  ret =  aci_gatt_add_char(accServHandle, UUID_TYPE_128, uuid, 1,
 80007dc:	f002 f84a 	bl	8002874 <aci_gatt_add_char>
                           CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
                           16, 0, &freeFallCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80007e0:	4603      	mov	r3, r0
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d13a      	bne.n	800085c <Add_Acc_Service+0x174>
  
  COPY_ACC_UUID(uuid);  
 80007e6:	f04f 0236 	mov.w	r2, #54	; 0x36
 80007ea:	f88d 201e 	strb.w	r2, [sp, #30]
 80007ee:	22ac      	movs	r2, #172	; 0xac
 80007f0:	f88d 201f 	strb.w	r2, [sp, #31]
 80007f4:	224b      	movs	r2, #75	; 0x4b
 80007f6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80007fa:	f06f 0230 	mvn.w	r2, #48	; 0x30
 80007fe:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8000802:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000806:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800080a:	220a      	movs	r2, #10
 800080c:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8000810:	2234      	movs	r2, #52	; 0x34
 8000812:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  ret =  aci_gatt_add_char(accServHandle, UUID_TYPE_128, uuid, 6,
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <Add_Acc_Service+0x17c>)
  COPY_ACC_UUID(uuid);  
 8000818:	f88d 001d 	strb.w	r0, [sp, #29]
  ret =  aci_gatt_add_char(accServHandle, UUID_TYPE_128, uuid, 6,
 800081c:	8810      	ldrh	r0, [r2, #0]
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <Add_Acc_Service+0x184>)
 8000820:	9205      	str	r2, [sp, #20]
 8000822:	9304      	str	r3, [sp, #16]
 8000824:	2204      	movs	r2, #4
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	2312      	movs	r3, #18
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	9603      	str	r6, [sp, #12]
 8000830:	2306      	movs	r3, #6
 8000832:	aa06      	add	r2, sp, #24
 8000834:	4621      	mov	r1, r4
  COPY_ACC_UUID(uuid);  
 8000836:	f88d 5018 	strb.w	r5, [sp, #24]
 800083a:	f88d b019 	strb.w	fp, [sp, #25]
 800083e:	f88d a01a 	strb.w	sl, [sp, #26]
 8000842:	f88d 901b 	strb.w	r9, [sp, #27]
 8000846:	f88d 401c 	strb.w	r4, [sp, #28]
 800084a:	f88d 8020 	strb.w	r8, [sp, #32]
 800084e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8000852:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
  ret =  aci_gatt_add_char(accServHandle, UUID_TYPE_128, uuid, 6,
 8000856:	f002 f80d 	bl	8002874 <aci_gatt_add_char>
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &accCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800085a:	b100      	cbz	r0, 800085e <Add_Acc_Service+0x176>
  PRINTF("Service ACC added. Handle 0x%04X, Free fall Charac handle: 0x%04X, Acc Charac handle: 0x%04X\n",accServHandle, freeFallCharHandle, accCharHandle);	
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding ACC service.\n");
  return BLE_STATUS_ERROR ;
 800085c:	2047      	movs	r0, #71	; 0x47
    
}
 800085e:	b00b      	add	sp, #44	; 0x2c
 8000860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000864:	200003a0 	.word	0x200003a0
 8000868:	20000390 	.word	0x20000390
 800086c:	200003a2 	.word	0x200003a2

08000870 <Acc_Update>:
 *
 * @param  Structure containing acceleration value in mg
 * @retval Status
 */
tBleStatus Acc_Update(AxesRaw_t *data)
{  
 8000870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  tBleStatus ret;    
  uint8_t buff[6];
    
  STORE_LE_16(buff,data->AXIS_X);
 8000872:	6803      	ldr	r3, [r0, #0]
 8000874:	f88d 3008 	strb.w	r3, [sp, #8]
 8000878:	121b      	asrs	r3, r3, #8
 800087a:	f88d 3009 	strb.w	r3, [sp, #9]
  STORE_LE_16(buff+2,data->AXIS_Y);
 800087e:	6843      	ldr	r3, [r0, #4]
 8000880:	f88d 300a 	strb.w	r3, [sp, #10]
 8000884:	121b      	asrs	r3, r3, #8
 8000886:	f88d 300b 	strb.w	r3, [sp, #11]
  STORE_LE_16(buff+4,data->AXIS_Z);
 800088a:	6883      	ldr	r3, [r0, #8]
 800088c:	f88d 300c 	strb.w	r3, [sp, #12]
 8000890:	121b      	asrs	r3, r3, #8
 8000892:	f88d 300d 	strb.w	r3, [sp, #13]
	
  ret = aci_gatt_update_char_value(accServHandle, accCharHandle, 0, 6, buff);
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <Acc_Update+0x48>)
 8000898:	8819      	ldrh	r1, [r3, #0]
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <Acc_Update+0x4c>)
 800089c:	8818      	ldrh	r0, [r3, #0]
 800089e:	ab02      	add	r3, sp, #8
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	2306      	movs	r3, #6
 80008a6:	f002 f8d3 	bl	8002a50 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
    PRINTF("Error while updating ACC characteristic.\n") ;
    return BLE_STATUS_ERROR ;
  }
  return BLE_STATUS_SUCCESS;	
}
 80008aa:	2800      	cmp	r0, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2047      	movne	r0, #71	; 0x47
 80008b0:	2000      	moveq	r0, #0
 80008b2:	b005      	add	sp, #20
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b8:	200003a2 	.word	0x200003a2
 80008bc:	200003a0 	.word	0x200003a0

080008c0 <Add_Environmental_Sensor_Service>:
 *
 * @param  None
 * @retval Status
 */
tBleStatus Add_Environmental_Sensor_Service(void)
{
 80008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c4:	b093      	sub	sp, #76	; 0x4c
  uint8_t uuid[16];
  uint16_t uuid16;
  charactFormat charFormat;
  uint16_t descHandle;
  
  COPY_ENV_SENS_SERVICE_UUID(uuid);
 80008c6:	f04f 031b 	mov.w	r3, #27
 80008ca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80008ce:	f06f 032a 	mvn.w	r3, #42	; 0x2a
 80008d2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80008d6:	f06f 021d 	mvn.w	r2, #29
 80008da:	f06f 035a 	mvn.w	r3, #90	; 0x5a
 80008de:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80008e2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 80008e6:	2300      	movs	r3, #0
 80008e8:	f04f 0211 	mov.w	r2, #17
 80008ec:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80008f0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 80008f4:	23d0      	movs	r3, #208	; 0xd0
 80008f6:	f06f 021b 	mvn.w	r2, #27
 80008fa:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80008fe:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 8000902:	2382      	movs	r3, #130	; 0x82
 8000904:	2240      	movs	r2, #64	; 0x40
 8000906:	2402      	movs	r4, #2
 8000908:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800090c:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 8000910:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8000914:	221a      	movs	r2, #26
 8000916:	2342      	movs	r3, #66	; 0x42
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 10,
 8000918:	4ebb      	ldr	r6, [pc, #748]	; (8000c08 <Add_Environmental_Sensor_Service+0x348>)
  COPY_ENV_SENS_SERVICE_UUID(uuid);
 800091a:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 800091e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 8000922:	f04f 0ac5 	mov.w	sl, #197	; 0xc5
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 10,
 8000926:	230a      	movs	r3, #10
  COPY_ENV_SENS_SERVICE_UUID(uuid);
 8000928:	2577      	movs	r5, #119	; 0x77
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 10,
 800092a:	9600      	str	r6, [sp, #0]
 800092c:	2201      	movs	r2, #1
 800092e:	a90e      	add	r1, sp, #56	; 0x38
 8000930:	4620      	mov	r0, r4
  COPY_ENV_SENS_SERVICE_UUID(uuid);
 8000932:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
 8000936:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
 800093a:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 10,
 800093e:	f001 ff56 	bl	80027ee <aci_gatt_add_serv>
                          &envSensServHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000942:	4603      	mov	r3, r0
 8000944:	2800      	cmp	r0, #0
 8000946:	f040 815a 	bne.w	8000bfe <Add_Environmental_Sensor_Service+0x33e>
  
  /* Temperature Characteristic */
  COPY_TEMP_CHAR_UUID(uuid);  
 800094a:	f04f 021b 	mov.w	r2, #27
 800094e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8000952:	f06f 022a 	mvn.w	r2, #42	; 0x2a
 8000956:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800095a:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 800095e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8000962:	22e3      	movs	r2, #227	; 0xe3
 8000964:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8000968:	22a9      	movs	r2, #169	; 0xa9
 800096a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800096e:	f06f 021d 	mvn.w	r2, #29
 8000972:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8000976:	f04f 0211 	mov.w	r2, #17
 800097a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800097e:	f06f 021b 	mvn.w	r2, #27
 8000982:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 8000986:	2255      	movs	r2, #85	; 0x55
 8000988:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 800098c:	222e      	movs	r2, #46	; 0x2e
 800098e:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8000992:	22a3      	movs	r2, #163	; 0xa3
 8000994:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8000998:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 800099c:	4d9b      	ldr	r5, [pc, #620]	; (8000c0c <Add_Environmental_Sensor_Service+0x34c>)
  COPY_TEMP_CHAR_UUID(uuid);  
 800099e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
  ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 80009a2:	2204      	movs	r2, #4
 80009a4:	f04f 0810 	mov.w	r8, #16
 80009a8:	9304      	str	r3, [sp, #16]
 80009aa:	9202      	str	r2, [sp, #8]
 80009ac:	9301      	str	r3, [sp, #4]
  COPY_TEMP_CHAR_UUID(uuid);  
 80009ae:	f04f 0b20 	mov.w	fp, #32
  ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 80009b2:	4623      	mov	r3, r4
 80009b4:	8830      	ldrh	r0, [r6, #0]
 80009b6:	9505      	str	r5, [sp, #20]
 80009b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80009bc:	9400      	str	r4, [sp, #0]
 80009be:	aa0e      	add	r2, sp, #56	; 0x38
 80009c0:	4621      	mov	r1, r4
  COPY_TEMP_CHAR_UUID(uuid);  
 80009c2:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
 80009c6:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
 80009ca:	f88d b044 	strb.w	fp, [sp, #68]	; 0x44
  ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 80009ce:	f001 ff51 	bl	8002874 <aci_gatt_add_char>
                           CHAR_PROP_READ, ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &tempCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009d2:	4603      	mov	r3, r0
 80009d4:	2800      	cmp	r0, #0
 80009d6:	f040 8112 	bne.w	8000bfe <Add_Environmental_Sensor_Service+0x33e>
  
  charFormat.format = FORMAT_SINT16;
 80009da:	220e      	movs	r2, #14
 80009dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  charFormat.exp = -1;
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  charFormat.unit = UNIT_TEMP_CELSIUS;
  charFormat.name_space = 0;
  charFormat.desc = 0;
  
  uuid16 = CHAR_FORMAT_DESC_UUID;
 80009e8:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  charFormat.unit = UNIT_TEMP_CELSIUS;
 80009ec:	f242 722f 	movw	r2, #10031	; 0x272f
 80009f0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
  uuid16 = CHAR_FORMAT_DESC_UUID;
 80009f4:	f642 1204 	movw	r2, #10500	; 0x2904
 80009f8:	f829 2d1c 	strh.w	r2, [r9, #-28]!
  
  ret = aci_gatt_add_char_desc(envSensServHandle,
 80009fc:	8829      	ldrh	r1, [r5, #0]
 80009fe:	9307      	str	r3, [sp, #28]
 8000a00:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8000a04:	9305      	str	r3, [sp, #20]
 8000a06:	2501      	movs	r5, #1
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	2707      	movs	r7, #7
 8000a0c:	ab0c      	add	r3, sp, #48	; 0x30
  charFormat.name_space = 0;
 8000a0e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
  charFormat.desc = 0;
 8000a12:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 8000a16:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
  ret = aci_gatt_add_char_desc(envSensServHandle,
 8000a1a:	9208      	str	r2, [sp, #32]
 8000a1c:	9302      	str	r3, [sp, #8]
 8000a1e:	8830      	ldrh	r0, [r6, #0]
 8000a20:	f8cd 8018 	str.w	r8, [sp, #24]
 8000a24:	464b      	mov	r3, r9
 8000a26:	9504      	str	r5, [sp, #16]
 8000a28:	9701      	str	r7, [sp, #4]
 8000a2a:	9700      	str	r7, [sp, #0]
 8000a2c:	462a      	mov	r2, r5
 8000a2e:	f001 ff85 	bl	800293c <aci_gatt_add_char_desc>
                               ATTR_ACCESS_READ_ONLY,
                               0,
                               16,
                               FALSE,
                               &descHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a32:	4603      	mov	r3, r0
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f040 80e2 	bne.w	8000bfe <Add_Environmental_Sensor_Service+0x33e>
  
  /* Pressure Characteristic */
  if(1){ //FIXME
    COPY_PRESS_CHAR_UUID(uuid);  
 8000a3a:	f04f 021b 	mov.w	r2, #27
 8000a3e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8000a42:	f06f 022a 	mvn.w	r2, #42	; 0x2a
 8000a46:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8000a4a:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 8000a4e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8000a52:	f04f 020b 	mov.w	r2, #11
 8000a56:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8000a5a:	2284      	movs	r2, #132	; 0x84
 8000a5c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8000a60:	f06f 021d 	mvn.w	r2, #29
 8000a64:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8000a68:	f04f 0211 	mov.w	r2, #17
 8000a6c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 8000a70:	228b      	movs	r2, #139	; 0x8b
 8000a72:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8000a76:	f06f 021b 	mvn.w	r2, #27
 8000a7a:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 8000a84:	22c4      	movs	r2, #196	; 0xc4
 8000a86:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 8000a8a:	22cd      	movs	r2, #205	; 0xcd
 8000a8c:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
 8000a90:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
    ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 3,
 8000a94:	f8df b178 	ldr.w	fp, [pc, #376]	; 8000c10 <Add_Environmental_Sensor_Service+0x350>
    COPY_PRESS_CHAR_UUID(uuid);  
 8000a98:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 3,
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	9304      	str	r3, [sp, #16]
 8000aa0:	9202      	str	r2, [sp, #8]
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	8830      	ldrh	r0, [r6, #0]
 8000aa6:	f8cd b014 	str.w	fp, [sp, #20]
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ab0:	9400      	str	r4, [sp, #0]
 8000ab2:	aa0e      	add	r2, sp, #56	; 0x38
 8000ab4:	4621      	mov	r1, r4
    COPY_PRESS_CHAR_UUID(uuid);  
 8000ab6:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
 8000aba:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 3,
 8000abe:	f001 fed9 	bl	8002874 <aci_gatt_add_char>
                             CHAR_PROP_READ, ATTR_PERMISSION_NONE,
                             GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                             16, 0, &pressCharHandle);
    if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	f040 809a 	bne.w	8000bfe <Add_Environmental_Sensor_Service+0x33e>
    
    charFormat.format = FORMAT_SINT24;
 8000aca:	220f      	movs	r2, #15
 8000acc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    charFormat.exp = -5;
 8000ad0:	22fb      	movs	r2, #251	; 0xfb
 8000ad2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    charFormat.unit = UNIT_PRESSURE_BAR;
 8000ad6:	f44f 521e 	mov.w	r2, #10112	; 0x2780
 8000ada:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    charFormat.name_space = 0;
    charFormat.desc = 0;
    
    uuid16 = CHAR_FORMAT_DESC_UUID;
 8000ade:	f642 1204 	movw	r2, #10500	; 0x2904
    
    ret = aci_gatt_add_char_desc(envSensServHandle,
 8000ae2:	f8bb 1000 	ldrh.w	r1, [fp]
    uuid16 = CHAR_FORMAT_DESC_UUID;
 8000ae6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    ret = aci_gatt_add_char_desc(envSensServHandle,
 8000aea:	9307      	str	r3, [sp, #28]
 8000aec:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8000af0:	9305      	str	r3, [sp, #20]
 8000af2:	9303      	str	r3, [sp, #12]
 8000af4:	ab0c      	add	r3, sp, #48	; 0x30
    charFormat.name_space = 0;
 8000af6:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    charFormat.desc = 0;
 8000afa:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 8000afe:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    ret = aci_gatt_add_char_desc(envSensServHandle,
 8000b02:	9208      	str	r2, [sp, #32]
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	8830      	ldrh	r0, [r6, #0]
 8000b08:	f8cd 8018 	str.w	r8, [sp, #24]
 8000b0c:	464b      	mov	r3, r9
 8000b0e:	9504      	str	r5, [sp, #16]
 8000b10:	9701      	str	r7, [sp, #4]
 8000b12:	9700      	str	r7, [sp, #0]
 8000b14:	462a      	mov	r2, r5
 8000b16:	f001 ff11 	bl	800293c <aci_gatt_add_char_desc>
                                 ATTR_ACCESS_READ_ONLY,
                                 0,
                                 16,
                                 FALSE,
                                 &descHandle);
    if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d16e      	bne.n	8000bfe <Add_Environmental_Sensor_Service+0x33e>
  }    
  /* Humidity Characteristic */
  if(1){   //FIXME
    COPY_HUMIDITY_CHAR_UUID(uuid);  
 8000b20:	f04f 021b 	mov.w	r2, #27
 8000b24:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8000b28:	f06f 022a 	mvn.w	r2, #42	; 0x2a
 8000b2c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8000b30:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 8000b34:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8000b38:	2273      	movs	r2, #115	; 0x73
 8000b3a:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8000b3e:	22a0      	movs	r2, #160	; 0xa0
 8000b40:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8000b44:	f06f 021d 	mvn.w	r2, #29
 8000b48:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8000b4c:	f04f 0211 	mov.w	r2, #17
 8000b50:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 8000b54:	228c      	movs	r2, #140	; 0x8c
 8000b56:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8000b5a:	f06f 021b 	mvn.w	r2, #27
 8000b5e:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 8000b62:	2260      	movs	r2, #96	; 0x60
 8000b64:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 8000b68:	f04f 020b 	mov.w	r2, #11
 8000b6c:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
 8000b70:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 8000b74:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
    ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 8000b78:	2204      	movs	r2, #4
 8000b7a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8000c14 <Add_Environmental_Sensor_Service+0x354>
    COPY_HUMIDITY_CHAR_UUID(uuid);  
 8000b7e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 8000b82:	9304      	str	r3, [sp, #16]
 8000b84:	9202      	str	r2, [sp, #8]
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	8830      	ldrh	r0, [r6, #0]
 8000b8a:	f8cd a014 	str.w	sl, [sp, #20]
 8000b8e:	4623      	mov	r3, r4
 8000b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b94:	9400      	str	r4, [sp, #0]
 8000b96:	aa0e      	add	r2, sp, #56	; 0x38
 8000b98:	4621      	mov	r1, r4
    COPY_HUMIDITY_CHAR_UUID(uuid);  
 8000b9a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
 8000b9e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
    ret =  aci_gatt_add_char(envSensServHandle, UUID_TYPE_128, uuid, 2,
 8000ba2:	f001 fe67 	bl	8002874 <aci_gatt_add_char>
                             CHAR_PROP_READ, ATTR_PERMISSION_NONE,
                             GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                             16, 0, &humidityCharHandle);
    if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	bb48      	cbnz	r0, 8000bfe <Add_Environmental_Sensor_Service+0x33e>
    
    charFormat.format = FORMAT_UINT16;
 8000baa:	2206      	movs	r2, #6
 8000bac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    charFormat.exp = -1;
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    charFormat.unit = UNIT_UNITLESS;
 8000bb8:	f44f 521c 	mov.w	r2, #9984	; 0x2700
 8000bbc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    charFormat.name_space = 0;
    charFormat.desc = 0;
    
    uuid16 = CHAR_FORMAT_DESC_UUID;
 8000bc0:	f642 1204 	movw	r2, #10500	; 0x2904
    
    ret = aci_gatt_add_char_desc(envSensServHandle,
 8000bc4:	f8ba 1000 	ldrh.w	r1, [sl]
    uuid16 = CHAR_FORMAT_DESC_UUID;
 8000bc8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    ret = aci_gatt_add_char_desc(envSensServHandle,
 8000bcc:	9307      	str	r3, [sp, #28]
 8000bce:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8000bd2:	9305      	str	r3, [sp, #20]
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	ab0c      	add	r3, sp, #48	; 0x30
    charFormat.name_space = 0;
 8000bd8:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    charFormat.desc = 0;
 8000bdc:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 8000be0:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    ret = aci_gatt_add_char_desc(envSensServHandle,
 8000be4:	9208      	str	r2, [sp, #32]
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	8830      	ldrh	r0, [r6, #0]
 8000bea:	f8cd 8018 	str.w	r8, [sp, #24]
 8000bee:	9504      	str	r5, [sp, #16]
 8000bf0:	9701      	str	r7, [sp, #4]
 8000bf2:	9700      	str	r7, [sp, #0]
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	462a      	mov	r2, r5
 8000bf8:	f001 fea0 	bl	800293c <aci_gatt_add_char_desc>
                                 ATTR_ACCESS_READ_ONLY,
                                 0,
                                 16,
                                 FALSE,
                                 &descHandle);
    if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000bfc:	b100      	cbz	r0, 8000c00 <Add_Environmental_Sensor_Service+0x340>
  PRINTF("Service ENV_SENS added. Handle 0x%04X, TEMP Charac handle: 0x%04X, PRESS Charac handle: 0x%04X, HUMID Charac handle: 0x%04X\n",envSensServHandle, tempCharHandle, pressCharHandle, humidityCharHandle);	
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding ENV_SENS service.\n");
  return BLE_STATUS_ERROR ;
 8000bfe:	2047      	movs	r0, #71	; 0x47
  
}
 8000c00:	b013      	add	sp, #76	; 0x4c
 8000c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c06:	bf00      	nop
 8000c08:	20000392 	.word	0x20000392
 8000c0c:	2000039a 	.word	0x2000039a
 8000c10:	20000398 	.word	0x20000398
 8000c14:	20000394 	.word	0x20000394

08000c18 <Temp_Update>:
 * @brief  Update temperature characteristic value.
 * @param  Temperature in tenths of degree 
 * @retval Status
 */
tBleStatus Temp_Update(int16_t temp)
{  
 8000c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(envSensServHandle, tempCharHandle, 0, 2,
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <Temp_Update+0x28>)
{  
 8000c1c:	ab04      	add	r3, sp, #16
  ret = aci_gatt_update_char_value(envSensServHandle, tempCharHandle, 0, 2,
 8000c1e:	8811      	ldrh	r1, [r2, #0]
{  
 8000c20:	f823 0d02 	strh.w	r0, [r3, #-2]!
  ret = aci_gatt_update_char_value(envSensServHandle, tempCharHandle, 0, 2,
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <Temp_Update+0x2c>)
 8000c26:	8810      	ldrh	r0, [r2, #0]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f001 ff0f 	bl	8002a50 <aci_gatt_update_char_value>
    PRINTF("Error while updating TEMP characteristic.\n") ;
    return BLE_STATUS_ERROR ;
  }
  return BLE_STATUS_SUCCESS;
	
}
 8000c32:	2800      	cmp	r0, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2047      	movne	r0, #71	; 0x47
 8000c38:	2000      	moveq	r0, #0
 8000c3a:	b005      	add	sp, #20
 8000c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c40:	2000039a 	.word	0x2000039a
 8000c44:	20000392 	.word	0x20000392

08000c48 <Press_Update>:
 * @brief  Update pressure characteristic value.
 * @param  int32_t Pressure in mbar 
 * @retval tBleStatus Status
 */
tBleStatus Press_Update(int32_t press)
{  
 8000c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(envSensServHandle, pressCharHandle, 0, 3,
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <Press_Update+0x28>)
{  
 8000c4c:	ab04      	add	r3, sp, #16
  ret = aci_gatt_update_char_value(envSensServHandle, pressCharHandle, 0, 3,
 8000c4e:	8811      	ldrh	r1, [r2, #0]
{  
 8000c50:	f843 0d04 	str.w	r0, [r3, #-4]!
  ret = aci_gatt_update_char_value(envSensServHandle, pressCharHandle, 0, 3,
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <Press_Update+0x2c>)
 8000c56:	8810      	ldrh	r0, [r2, #0]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f001 fef7 	bl	8002a50 <aci_gatt_update_char_value>
    PRINTF("Error while updating TEMP characteristic.\n") ;
    return BLE_STATUS_ERROR ;
  }
  return BLE_STATUS_SUCCESS;
	
}
 8000c62:	2800      	cmp	r0, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2047      	movne	r0, #71	; 0x47
 8000c68:	2000      	moveq	r0, #0
 8000c6a:	b005      	add	sp, #20
 8000c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c70:	20000398 	.word	0x20000398
 8000c74:	20000392 	.word	0x20000392

08000c78 <Humidity_Update>:
 * @brief  Update humidity characteristic value.
 * @param  uint16_thumidity RH (Relative Humidity) in thenths of %
 * @retval tBleStatus      Status
 */
tBleStatus Humidity_Update(uint16_t humidity)
{  
 8000c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  tBleStatus ret;
  
  ret = aci_gatt_update_char_value(envSensServHandle, humidityCharHandle, 0, 2,
 8000c7a:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <Humidity_Update+0x28>)
{  
 8000c7c:	ab04      	add	r3, sp, #16
  ret = aci_gatt_update_char_value(envSensServHandle, humidityCharHandle, 0, 2,
 8000c7e:	8811      	ldrh	r1, [r2, #0]
{  
 8000c80:	f823 0d02 	strh.w	r0, [r3, #-2]!
  ret = aci_gatt_update_char_value(envSensServHandle, humidityCharHandle, 0, 2,
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <Humidity_Update+0x2c>)
 8000c86:	8810      	ldrh	r0, [r2, #0]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f001 fedf 	bl	8002a50 <aci_gatt_update_char_value>
    PRINTF("Error while updating TEMP characteristic.\n") ;
    return BLE_STATUS_ERROR ;
  }
  return BLE_STATUS_SUCCESS;
  
}
 8000c92:	2800      	cmp	r0, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2047      	movne	r0, #71	; 0x47
 8000c98:	2000      	moveq	r0, #0
 8000c9a:	b005      	add	sp, #20
 8000c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ca0:	20000394 	.word	0x20000394
 8000ca4:	20000392 	.word	0x20000392

08000ca8 <setConnectable>:
 *                                 8, local_name, 3, serviceUUIDList, 0, 0);    
 *  ret = aci_gap_update_adv_data(5, manuf_data);
 *
 */
void setConnectable(void)
{  
 8000ca8:	b500      	push	{lr}
  tBleStatus ret;
  
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G'};
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <setConnectable+0x3c>)
{  
 8000cac:	b08b      	sub	sp, #44	; 0x2c
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G'};
 8000cae:	6810      	ldr	r0, [r2, #0]
 8000cb0:	6851      	ldr	r1, [r2, #4]
 8000cb2:	ab08      	add	r3, sp, #32
 8000cb4:	c303      	stmia	r3!, {r0, r1}
  
  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	f002 f96a 	bl	8002f92 <hci_le_set_scan_resp_data>
  PRINTF("General Discoverable Mode.\n");
  
  ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE,
 8000cbe:	aa08      	add	r2, sp, #32
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9202      	str	r2, [sp, #8]
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	9201      	str	r2, [sp, #4]
 8000cc8:	9306      	str	r3, [sp, #24]
 8000cca:	9305      	str	r3, [sp, #20]
 8000ccc:	9304      	str	r3, [sp, #16]
 8000cce:	9303      	str	r3, [sp, #12]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fcc3 	bl	8002662 <aci_gap_set_discoverable>
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("Error while setting discoverable mode (%d)\n", ret);    
  }  
}
 8000cdc:	b00b      	add	sp, #44	; 0x2c
 8000cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ce2:	bf00      	nop
 8000ce4:	08003336 	.word	0x08003336

08000ce8 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <GAP_DisconnectionComplete_CB+0x10>)
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000cea:	4904      	ldr	r1, [pc, #16]	; (8000cfc <GAP_DisconnectionComplete_CB+0x14>)
  connected = FALSE;
 8000cec:	2200      	movs	r2, #0
  set_connectable = TRUE;
 8000cee:	2001      	movs	r0, #1
  connected = FALSE;
 8000cf0:	601a      	str	r2, [r3, #0]
  set_connectable = TRUE;
 8000cf2:	7008      	strb	r0, [r1, #0]
  notification_enabled = FALSE;
 8000cf4:	719a      	strb	r2, [r3, #6]
 8000cf6:	4770      	bx	lr
 8000cf8:	200000a0 	.word	0x200000a0
 8000cfc:	20000000 	.word	0x20000000

08000d00 <Read_Request_CB>:
 * @param  uint16_t Handle of the attribute
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{  
  if(handle == accCharHandle + 1){
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <Read_Request_CB+0xb8>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4298      	cmp	r0, r3
{  
 8000d08:	b513      	push	{r0, r1, r4, lr}
  if(handle == accCharHandle + 1){
 8000d0a:	d10c      	bne.n	8000d26 <Read_Request_CB+0x26>
    Acc_Update((AxesRaw_t*)&axes_data);
 8000d0c:	482b      	ldr	r0, [pc, #172]	; (8000dbc <Read_Request_CB+0xbc>)
 8000d0e:	f7ff fdaf 	bl	8000870 <Acc_Update>
    
    Humidity_Update(data);
  }  
  
  //EXIT:
  if(connection_handle != 0)
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <Read_Request_CB+0xc0>)
 8000d14:	8893      	ldrh	r3, [r2, #4]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b11b      	cbz	r3, 8000d22 <Read_Request_CB+0x22>
    aci_gatt_allow_read(connection_handle);
 8000d1a:	8890      	ldrh	r0, [r2, #4]
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	f001 fedb 	bl	8002ad8 <aci_gatt_allow_read>
}
 8000d22:	b002      	add	sp, #8
 8000d24:	bd10      	pop	{r4, pc}
  else if(handle == tempCharHandle + 1){
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <Read_Request_CB+0xc4>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	d113      	bne.n	8000d58 <Read_Request_CB+0x58>
    data = 270 + ((uint64_t)rand()*15)/RAND_MAX; //sensor emulation        
 8000d30:	f002 fa32 	bl	8003198 <rand>
 8000d34:	4604      	mov	r4, r0
    Acc_Update((AxesRaw_t*)&axes_data); //FIXME: to overcome issue on Android App
 8000d36:	4821      	ldr	r0, [pc, #132]	; (8000dbc <Read_Request_CB+0xbc>)
 8000d38:	f7ff fd9a 	bl	8000870 <Acc_Update>
    data = 270 + ((uint64_t)rand()*15)/RAND_MAX; //sensor emulation        
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d42:	2300      	movs	r3, #0
 8000d44:	fb84 0100 	smull	r0, r1, r4, r0
 8000d48:	f7ff fa3e 	bl	80001c8 <__aeabi_uldivmod>
 8000d4c:	f500 7087 	add.w	r0, r0, #270	; 0x10e
    Temp_Update(data);
 8000d50:	b200      	sxth	r0, r0
 8000d52:	f7ff ff61 	bl	8000c18 <Temp_Update>
 8000d56:	e7dc      	b.n	8000d12 <Read_Request_CB+0x12>
  else if(handle == pressCharHandle + 1){
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <Read_Request_CB+0xc8>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d114      	bne.n	8000d8c <Read_Request_CB+0x8c>
    Timer_Set(&t, CLOCK_SECOND/10);
 8000d62:	2164      	movs	r1, #100	; 0x64
 8000d64:	4668      	mov	r0, sp
 8000d66:	f002 f9a9 	bl	80030bc <Timer_Set>
    data = 100000 + ((uint64_t)rand()*1000)/RAND_MAX;
 8000d6a:	f002 fa15 	bl	8003198 <rand>
 8000d6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d76:	2300      	movs	r3, #0
 8000d78:	fb80 0101 	smull	r0, r1, r0, r1
 8000d7c:	f7ff fa24 	bl	80001c8 <__aeabi_uldivmod>
    Press_Update(data);
 8000d80:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 8000d84:	30a0      	adds	r0, #160	; 0xa0
 8000d86:	f7ff ff5f 	bl	8000c48 <Press_Update>
 8000d8a:	e7c2      	b.n	8000d12 <Read_Request_CB+0x12>
  else if(handle == humidityCharHandle + 1){
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <Read_Request_CB+0xcc>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d1bd      	bne.n	8000d12 <Read_Request_CB+0x12>
    data = 450 + ((uint64_t)rand()*100)/RAND_MAX;
 8000d96:	f002 f9ff 	bl	8003198 <rand>
 8000d9a:	2164      	movs	r1, #100	; 0x64
 8000d9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000da0:	2300      	movs	r3, #0
 8000da2:	fb80 0101 	smull	r0, r1, r0, r1
 8000da6:	f7ff fa0f 	bl	80001c8 <__aeabi_uldivmod>
 8000daa:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    Humidity_Update(data);
 8000dae:	b280      	uxth	r0, r0
 8000db0:	f7ff ff62 	bl	8000c78 <Humidity_Update>
 8000db4:	e7ad      	b.n	8000d12 <Read_Request_CB+0x12>
 8000db6:	bf00      	nop
 8000db8:	200003a2 	.word	0x200003a2
 8000dbc:	200000a8 	.word	0x200000a8
 8000dc0:	200000a0 	.word	0x200000a0
 8000dc4:	2000039a 	.word	0x2000039a
 8000dc8:	20000398 	.word	0x20000398
 8000dcc:	20000394 	.word	0x20000394

08000dd0 <Add_Time_Service>:
 * @brief  Add a time service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Time_Service(void)
{
 8000dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd4:	b08b      	sub	sp, #44	; 0x2c
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* copy "Timer service UUID" defined above to 'uuid' local variable */
  COPY_TIME_SERVICE_UUID(uuid);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f88d 301d 	strb.w	r3, [sp, #29]
 8000ddc:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000de0:	f88d 301f 	strb.w	r3, [sp, #31]
 8000de4:	f06f 031e 	mvn.w	r3, #30
 8000de8:	f88d 3020 	strb.w	r3, [sp, #32]
 8000dec:	f04f 0311 	mov.w	r3, #17
 8000df0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8000df4:	f04f 033a 	mov.w	r3, #58	; 0x3a
 8000df8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8000dfc:	f06f 0330 	mvn.w	r3, #48	; 0x30
 8000e00:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8000e04:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000e08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000e0c:	f04f 036e 	mov.w	r3, #110	; 0x6e
 8000e10:	2402      	movs	r4, #2
 8000e12:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   * now add "Time service" to GATT server, service handle is returned
   * via 'timeServHandle' parameter of aci_gatt_add_serv() API. 
   * Please refer to 'BlueNRG Application Command Interface.pdf' for detailed
   * API description 
  */
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000e16:	4d55      	ldr	r5, [pc, #340]	; (8000f6c <Add_Time_Service+0x19c>)
 8000e18:	9500      	str	r5, [sp, #0]
  COPY_TIME_SERVICE_UUID(uuid);
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8000e20:	f04f 0a1b 	mov.w	sl, #27
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000e24:	2307      	movs	r3, #7
  COPY_TIME_SERVICE_UUID(uuid);
 8000e26:	f04f 09c5 	mov.w	r9, #197	; 0xc5
 8000e2a:	f04f 08d5 	mov.w	r8, #213	; 0xd5
 8000e2e:	27a5      	movs	r7, #165	; 0xa5
 8000e30:	26b4      	movs	r6, #180	; 0xb4
 8000e32:	f04f 0b36 	mov.w	fp, #54	; 0x36
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000e36:	2201      	movs	r2, #1
 8000e38:	a906      	add	r1, sp, #24
 8000e3a:	4620      	mov	r0, r4
  COPY_TIME_SERVICE_UUID(uuid);
 8000e3c:	f88d a018 	strb.w	sl, [sp, #24]
 8000e40:	f88d 9019 	strb.w	r9, [sp, #25]
 8000e44:	f88d 801a 	strb.w	r8, [sp, #26]
 8000e48:	f88d 701b 	strb.w	r7, [sp, #27]
 8000e4c:	f88d 401c 	strb.w	r4, [sp, #28]
 8000e50:	f88d 601e 	strb.w	r6, [sp, #30]
 8000e54:	f88d b026 	strb.w	fp, [sp, #38]	; 0x26
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 7,
 8000e58:	f001 fcc9 	bl	80027ee <aci_gatt_add_serv>
                          &timeServHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d17f      	bne.n	8000f62 <Add_Time_Service+0x192>
   * is returned via 'secondsCharHandle' parameter of aci_gatt_add_char() API.
   * This characteristic is read only, as specified by CHAR_PROP_READ parameter.
   * Please refer to 'BlueNRG Application Command Interface.pdf' for detailed
   * API description 
  */  
  COPY_TIME_UUID(uuid);
 8000e62:	f06f 0265 	mvn.w	r2, #101	; 0x65
 8000e66:	f88d 201f 	strb.w	r2, [sp, #31]
 8000e6a:	f06f 021e 	mvn.w	r2, #30
 8000e6e:	f88d 2020 	strb.w	r2, [sp, #32]
 8000e72:	f04f 0211 	mov.w	r2, #17
 8000e76:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8000e7a:	f04f 023a 	mov.w	r2, #58	; 0x3a
 8000e7e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8000e82:	f06f 0230 	mvn.w	r2, #48	; 0x30
 8000e86:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8000e8a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000e8e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8000e92:	f04f 026e 	mov.w	r2, #110	; 0x6e
 8000e96:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8000e9a:	2209      	movs	r2, #9
 8000e9c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  ret =  aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000ea0:	4a33      	ldr	r2, [pc, #204]	; (8000f70 <Add_Time_Service+0x1a0>)
 8000ea2:	9205      	str	r2, [sp, #20]
 8000ea4:	2210      	movs	r2, #16
  COPY_TIME_UUID(uuid);
 8000ea6:	f88d 001d 	strb.w	r0, [sp, #29]
  ret =  aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000eaa:	9304      	str	r3, [sp, #16]
 8000eac:	9203      	str	r2, [sp, #12]
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	8828      	ldrh	r0, [r5, #0]
 8000eb4:	9400      	str	r4, [sp, #0]
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	aa06      	add	r2, sp, #24
 8000eba:	4621      	mov	r1, r4
  COPY_TIME_UUID(uuid);
 8000ebc:	f88d a018 	strb.w	sl, [sp, #24]
 8000ec0:	f88d 9019 	strb.w	r9, [sp, #25]
 8000ec4:	f88d 801a 	strb.w	r8, [sp, #26]
 8000ec8:	f88d 701b 	strb.w	r7, [sp, #27]
 8000ecc:	f88d 401c 	strb.w	r4, [sp, #28]
 8000ed0:	f88d 601e 	strb.w	r6, [sp, #30]
 8000ed4:	f88d b026 	strb.w	fp, [sp, #38]	; 0x26
  ret =  aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000ed8:	f001 fccc 	bl	8002874 <aci_gatt_add_char>
                           CHAR_PROP_READ, ATTR_PERMISSION_NONE, 0,
                           16, 0, &secondsCharHandle);
  
  if (ret != BLE_STATUS_SUCCESS) goto fail;  
 8000edc:	4603      	mov	r3, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d13f      	bne.n	8000f62 <Add_Time_Service+0x192>
  
  COPY_MINUTE_UUID(uuid);  
 8000ee2:	f06f 0265 	mvn.w	r2, #101	; 0x65
 8000ee6:	f88d 201f 	strb.w	r2, [sp, #31]
 8000eea:	f06f 021e 	mvn.w	r2, #30
 8000eee:	f88d 2020 	strb.w	r2, [sp, #32]
 8000ef2:	f04f 0211 	mov.w	r2, #17
 8000ef6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8000efa:	f04f 023a 	mov.w	r2, #58	; 0x3a
 8000efe:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8000f02:	f06f 0230 	mvn.w	r2, #48	; 0x30
 8000f06:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8000f0a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000f0e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8000f12:	f04f 026e 	mov.w	r2, #110	; 0x6e
 8000f16:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8000f1a:	220a      	movs	r2, #10
 8000f1c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  /* 
   * Add "Minutes characteristic" to "Time service". 
   * This characteristic is readable as well as notifiable only, as specified 
   * by CHAR_PROP_NOTIFY|CHAR_PROP_READ parameter below.   
   */
  ret = aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <Add_Time_Service+0x1a4>)
 8000f22:	9205      	str	r2, [sp, #20]
 8000f24:	2201      	movs	r2, #1
 8000f26:	9204      	str	r2, [sp, #16]
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2312      	movs	r3, #18
  COPY_MINUTE_UUID(uuid);  
 8000f30:	f88d 001d 	strb.w	r0, [sp, #29]
  ret = aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000f34:	9203      	str	r2, [sp, #12]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	8828      	ldrh	r0, [r5, #0]
  COPY_MINUTE_UUID(uuid);  
 8000f3a:	f88d a018 	strb.w	sl, [sp, #24]
  ret = aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000f3e:	2304      	movs	r3, #4
 8000f40:	aa06      	add	r2, sp, #24
 8000f42:	4621      	mov	r1, r4
  COPY_MINUTE_UUID(uuid);  
 8000f44:	f88d 9019 	strb.w	r9, [sp, #25]
 8000f48:	f88d 801a 	strb.w	r8, [sp, #26]
 8000f4c:	f88d 701b 	strb.w	r7, [sp, #27]
 8000f50:	f88d 401c 	strb.w	r4, [sp, #28]
 8000f54:	f88d 601e 	strb.w	r6, [sp, #30]
 8000f58:	f88d b026 	strb.w	fp, [sp, #38]	; 0x26
  ret = aci_gatt_add_char(timeServHandle, UUID_TYPE_128, uuid, 4,
 8000f5c:	f001 fc8a 	bl	8002874 <aci_gatt_add_char>
                          CHAR_PROP_NOTIFY|CHAR_PROP_READ, ATTR_PERMISSION_NONE, 0,
                          16, 1, &minuteCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000f60:	b100      	cbz	r0, 8000f64 <Add_Time_Service+0x194>
  return BLE_STATUS_SUCCESS; 
  
  /* return BLE_STATUS_ERROR if we reach this tag */
fail:
  PRINTF("Error while adding Time service.\n");
  return BLE_STATUS_ERROR ;    
 8000f62:	2047      	movs	r0, #71	; 0x47
}
 8000f64:	b00b      	add	sp, #44	; 0x2c
 8000f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200003aa 	.word	0x200003aa
 8000f70:	20000396 	.word	0x20000396
 8000f74:	2000039c 	.word	0x2000039c

08000f78 <Seconds_Update>:
 * @brief  Update seconds characteristic value of Time service.
 * @param  None
 * @retval Status
 */
tBleStatus Seconds_Update(void)
{  
 8000f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t val;
  tBleStatus ret;  
  
  /* Obtain system tick value in milliseconds, and convert it to seconds. */    
  val = HAL_GetTick();
 8000f7a:	f000 fbe7 	bl	800174c <HAL_GetTick>
  val = val/1000;
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb0 f0f3 	udiv	r0, r0, r3
  
  /* create a time[] array to pass as last argument of aci_gatt_update_char_value() API*/
  const uint8_t time[4] = {(val >> 24)&0xFF, (val >> 16)&0xFF, (val >> 8)&0xFF, (val)&0xFF};  
 8000f86:	0c03      	lsrs	r3, r0, #16
 8000f88:	f88d 300d 	strb.w	r3, [sp, #13]
 8000f8c:	0a03      	lsrs	r3, r0, #8
 8000f8e:	f88d 300e 	strb.w	r3, [sp, #14]
  /*
   * Update value of "Seconds characteristic" using aci_gatt_update_char_value() API 
   * Please refer to 'BlueNRG Application Command Interface.pdf' for detailed
   * API description   
   */
  ret = aci_gatt_update_char_value(timeServHandle, secondsCharHandle, 0, 4,
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <Seconds_Update+0x44>)
  const uint8_t time[4] = {(val >> 24)&0xFF, (val >> 16)&0xFF, (val >> 8)&0xFF, (val)&0xFF};  
 8000f94:	f88d 000f 	strb.w	r0, [sp, #15]
  ret = aci_gatt_update_char_value(timeServHandle, secondsCharHandle, 0, 4,
 8000f98:	8819      	ldrh	r1, [r3, #0]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <Seconds_Update+0x48>)
 8000f9c:	8818      	ldrh	r0, [r3, #0]
 8000f9e:	ab03      	add	r3, sp, #12
  const uint8_t time[4] = {(val >> 24)&0xFF, (val >> 16)&0xFF, (val >> 8)&0xFF, (val)&0xFF};  
 8000fa0:	2200      	movs	r2, #0
  ret = aci_gatt_update_char_value(timeServHandle, secondsCharHandle, 0, 4,
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2304      	movs	r3, #4
  const uint8_t time[4] = {(val >> 24)&0xFF, (val >> 16)&0xFF, (val >> 8)&0xFF, (val)&0xFF};  
 8000fa6:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = aci_gatt_update_char_value(timeServHandle, secondsCharHandle, 0, 4,
 8000faa:	f001 fd51 	bl	8002a50 <aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
    PRINTF("Error while updating TIME characteristic.\n") ;
    return BLE_STATUS_ERROR ;
  }
  return BLE_STATUS_SUCCESS;		
}
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2047      	movne	r0, #71	; 0x47
 8000fb4:	2000      	moveq	r0, #0
 8000fb6:	b005      	add	sp, #20
 8000fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fbc:	20000396 	.word	0x20000396
 8000fc0:	200003aa 	.word	0x200003aa

08000fc4 <Minutes_Notify>:
 * @brief  Send a notification for a minute characteristic of time service.
 * @param  None
 * @retval Status
 */
tBleStatus Minutes_Notify(void)
{  
 8000fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t val; 
  uint32_t minuteValue;   
  tBleStatus ret;

  /* Obtain system tick value in milliseconds */  
  val = HAL_GetTick();	
 8000fc6:	f000 fbc1 	bl	800174c <HAL_GetTick>
  
  /* update "Minutes characteristic" value if it has changed w.r.t. previous 
   * "minute" value. 
   */
  if((minuteValue=val/(60*1000))!=previousMinuteValue) {    
 8000fca:	4913      	ldr	r1, [pc, #76]	; (8001018 <Minutes_Notify+0x54>)
 8000fcc:	684a      	ldr	r2, [r1, #4]
 8000fce:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	d01a      	beq.n	8001014 <Minutes_Notify+0x50>
    /* memorize this "minute" value for future usage */
    previousMinuteValue = minuteValue;    
 8000fde:	604b      	str	r3, [r1, #4]
  
    /* create a time[] array to pass as last argument of aci_gatt_update_char_value() API*/
    const uint8_t time[4] = {(minuteValue >> 24)&0xFF, (minuteValue >> 16)&0xFF, (minuteValue >> 8)&0xFF, (minuteValue)&0xFF};
 8000fe0:	0c19      	lsrs	r1, r3, #16
 8000fe2:	f88d 100d 	strb.w	r1, [sp, #13]
 8000fe6:	f88d 300f 	strb.w	r3, [sp, #15]
 8000fea:	0a19      	lsrs	r1, r3, #8
  /*
   * Update value of "Minutes characteristic" using aci_gatt_update_char_value() API 
   * Please refer to 'BlueNRG Application Command Interface.pdf' for detailed
   * API description   
   */    
    ret = aci_gatt_update_char_value(timeServHandle, minuteCharHandle, 0, 4,
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <Minutes_Notify+0x58>)
    const uint8_t time[4] = {(minuteValue >> 24)&0xFF, (minuteValue >> 16)&0xFF, (minuteValue >> 8)&0xFF, (minuteValue)&0xFF};
 8000fee:	f88d 100e 	strb.w	r1, [sp, #14]
    ret = aci_gatt_update_char_value(timeServHandle, minuteCharHandle, 0, 4,
 8000ff2:	8819      	ldrh	r1, [r3, #0]
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <Minutes_Notify+0x5c>)
    const uint8_t time[4] = {(minuteValue >> 24)&0xFF, (minuteValue >> 16)&0xFF, (minuteValue >> 8)&0xFF, (minuteValue)&0xFF};
 8000ff6:	f88d 200c 	strb.w	r2, [sp, #12]
    ret = aci_gatt_update_char_value(timeServHandle, minuteCharHandle, 0, 4,
 8000ffa:	8818      	ldrh	r0, [r3, #0]
 8000ffc:	ab03      	add	r3, sp, #12
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2304      	movs	r3, #4
 8001002:	f001 fd25 	bl	8002a50 <aci_gatt_update_char_value>
                                     time);          
    if (ret != BLE_STATUS_SUCCESS){
      PRINTF("Error while updating TIME characteristic.\n") ;
      return BLE_STATUS_ERROR ;
 8001006:	2800      	cmp	r0, #0
 8001008:	bf14      	ite	ne
 800100a:	2047      	movne	r0, #71	; 0x47
 800100c:	2000      	moveq	r0, #0
    }
  }
  return BLE_STATUS_SUCCESS;	
}
 800100e:	b005      	add	sp, #20
 8001010:	f85d fb04 	ldr.w	pc, [sp], #4
  return BLE_STATUS_SUCCESS;	
 8001014:	4610      	mov	r0, r2
 8001016:	e7fa      	b.n	800100e <Minutes_Notify+0x4a>
 8001018:	20000000 	.word	0x20000000
 800101c:	2000039c 	.word	0x2000039c
 8001020:	200003aa 	.word	0x200003aa

08001024 <Update_Time_Characteristics>:
/**
 * @brief  Updates "Seconds and Minutes characteristics" values.
 * @param  None
 * @retval None
 */
void Update_Time_Characteristics(void) {
 8001024:	b508      	push	{r3, lr}
  /* update "seconds and minutes characteristics" of time service */
  Seconds_Update();
 8001026:	f7ff ffa7 	bl	8000f78 <Seconds_Update>
  Minutes_Notify();
}
 800102a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Minutes_Notify();
 800102e:	f7ff bfc9 	b.w	8000fc4 <Minutes_Notify>
	...

08001034 <Add_LED_Service>:
 * @brief  Add LED button service using a vendor specific profile.
 * @param  None
 * @retval Status
 */
tBleStatus Add_LED_Service(void)
{
 8001034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001038:	b08b      	sub	sp, #44	; 0x2c
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* copy "LED service UUID" defined above to 'uuid' local variable */
  COPY_LED_SERVICE_UUID(uuid);
 800103a:	2300      	movs	r3, #0
 800103c:	f88d 301d 	strb.w	r3, [sp, #29]
 8001040:	f06f 031e 	mvn.w	r3, #30
 8001044:	f88d 3020 	strb.w	r3, [sp, #32]
 8001048:	f04f 0311 	mov.w	r3, #17
 800104c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8001050:	f04f 033a 	mov.w	r3, #58	; 0x3a
 8001054:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8001058:	f06f 0330 	mvn.w	r3, #48	; 0x30
 800105c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8001060:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001064:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001068:	f04f 036e 	mov.w	r3, #110	; 0x6e
 800106c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001070:	f04f 0336 	mov.w	r3, #54	; 0x36
 8001074:	2402      	movs	r4, #2
 8001076:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   * now add "LED service" to GATT server, service handle is returned
   * via 'ledServHandle' parameter of aci_gatt_add_serv() API. 
   * Please refer to 'BlueNRG Application Command Interface.pdf' for detailed
   * API description 
  */  
  ret = aci_gatt_add_serv(UUID_TYPE_128, uuid, PRIMARY_SERVICE, 7,
 800107a:	4d34      	ldr	r5, [pc, #208]	; (800114c <Add_LED_Service+0x118>)
 800107c:	9500      	str	r5, [sp, #0]
  COPY_LED_SERVICE_UUID(uuid);
 800107e:	230b      	movs	r3, #11
 8001080:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8001084:	f04f 0b1b 	mov.w	fp, #27
  ret = aci_gatt_add_serv(UUID_TYPE_128, uuid, PRIMARY_SERVICE, 7,
 8001088:	2307      	movs	r3, #7
  COPY_LED_SERVICE_UUID(uuid);
 800108a:	f04f 0ac5 	mov.w	sl, #197	; 0xc5
 800108e:	f04f 09d5 	mov.w	r9, #213	; 0xd5
 8001092:	f04f 08a5 	mov.w	r8, #165	; 0xa5
 8001096:	27b4      	movs	r7, #180	; 0xb4
 8001098:	269a      	movs	r6, #154	; 0x9a
  ret = aci_gatt_add_serv(UUID_TYPE_128, uuid, PRIMARY_SERVICE, 7,
 800109a:	2201      	movs	r2, #1
 800109c:	a906      	add	r1, sp, #24
 800109e:	4620      	mov	r0, r4
  COPY_LED_SERVICE_UUID(uuid);
 80010a0:	f88d b018 	strb.w	fp, [sp, #24]
 80010a4:	f88d a019 	strb.w	sl, [sp, #25]
 80010a8:	f88d 901a 	strb.w	r9, [sp, #26]
 80010ac:	f88d 801b 	strb.w	r8, [sp, #27]
 80010b0:	f88d 401c 	strb.w	r4, [sp, #28]
 80010b4:	f88d 701e 	strb.w	r7, [sp, #30]
 80010b8:	f88d 601f 	strb.w	r6, [sp, #31]
  ret = aci_gatt_add_serv(UUID_TYPE_128, uuid, PRIMARY_SERVICE, 7,
 80010bc:	f001 fb97 	bl	80027ee <aci_gatt_add_serv>
                          &ledServHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 80010c0:	4603      	mov	r3, r0
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d13e      	bne.n	8001144 <Add_LED_Service+0x110>
  
  /* copy "LED button characteristic UUID" defined above to 'uuid' local variable */  
  COPY_LED_UUID(uuid);
 80010c6:	f06f 021e 	mvn.w	r2, #30
 80010ca:	f88d 2020 	strb.w	r2, [sp, #32]
 80010ce:	f04f 0211 	mov.w	r2, #17
 80010d2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80010d6:	f04f 023a 	mov.w	r2, #58	; 0x3a
 80010da:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80010de:	f06f 0230 	mvn.w	r2, #48	; 0x30
 80010e2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80010e6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80010ea:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80010ee:	f04f 026e 	mov.w	r2, #110	; 0x6e
   * is returned via 'ledButtonCharHandle' parameter of aci_gatt_add_char() API.
   * This characteristic is writable, as specified by 'CHAR_PROP_WRITE' parameter.
   * Please refer to 'BlueNRG Application Command Interface.pdf' for detailed
   * API description 
  */   
  ret =  aci_gatt_add_char(ledServHandle, UUID_TYPE_128, uuid, 4,
 80010f2:	4917      	ldr	r1, [pc, #92]	; (8001150 <Add_LED_Service+0x11c>)
  COPY_LED_UUID(uuid);
 80010f4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80010f8:	f04f 0236 	mov.w	r2, #54	; 0x36
 80010fc:	f88d 001d 	strb.w	r0, [sp, #29]
 8001100:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  ret =  aci_gatt_add_char(ledServHandle, UUID_TYPE_128, uuid, 4,
 8001104:	8828      	ldrh	r0, [r5, #0]
 8001106:	9105      	str	r1, [sp, #20]
  COPY_LED_UUID(uuid);
 8001108:	220c      	movs	r2, #12
  ret =  aci_gatt_add_char(ledServHandle, UUID_TYPE_128, uuid, 4,
 800110a:	2101      	movs	r1, #1
 800110c:	2510      	movs	r5, #16
 800110e:	e88d 000c 	stmia.w	sp, {r2, r3}
  COPY_LED_UUID(uuid);
 8001112:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  ret =  aci_gatt_add_char(ledServHandle, UUID_TYPE_128, uuid, 4,
 8001116:	9104      	str	r1, [sp, #16]
 8001118:	9102      	str	r1, [sp, #8]
 800111a:	9503      	str	r5, [sp, #12]
 800111c:	2304      	movs	r3, #4
 800111e:	aa06      	add	r2, sp, #24
 8001120:	4621      	mov	r1, r4
  COPY_LED_UUID(uuid);
 8001122:	f88d b018 	strb.w	fp, [sp, #24]
 8001126:	f88d a019 	strb.w	sl, [sp, #25]
 800112a:	f88d 901a 	strb.w	r9, [sp, #26]
 800112e:	f88d 801b 	strb.w	r8, [sp, #27]
 8001132:	f88d 401c 	strb.w	r4, [sp, #28]
 8001136:	f88d 701e 	strb.w	r7, [sp, #30]
 800113a:	f88d 601f 	strb.w	r6, [sp, #31]
  ret =  aci_gatt_add_char(ledServHandle, UUID_TYPE_128, uuid, 4,
 800113e:	f001 fb99 	bl	8002874 <aci_gatt_add_char>
                           CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 1, &ledButtonCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;  
 8001142:	b100      	cbz	r0, 8001146 <Add_LED_Service+0x112>
  PRINTF("Service LED BUTTON added. Handle 0x%04X, LED button Charac handle: 0x%04X\n",ledServHandle, ledButtonCharHandle);	
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding LED service.\n");
  return BLE_STATUS_ERROR;
 8001144:	2047      	movs	r0, #71	; 0x47
}
 8001146:	b00b      	add	sp, #44	; 0x2c
 8001148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114c:	200003a8 	.word	0x200003a8
 8001150:	2000039e 	.word	0x2000039e

08001154 <Attribute_Modified_CB>:
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  /* If GATT client has modified 'LED button characteristic' value, toggle LED2 */
  if(handle == ledButtonCharHandle + 1){      
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <Attribute_Modified_CB+0x14>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4298      	cmp	r0, r3
 800115c:	d102      	bne.n	8001164 <Attribute_Modified_CB+0x10>
      BSP_LED_Toggle(LED2);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 b932 	b.w	80013c8 <BSP_LED_Toggle>
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2000039e 	.word	0x2000039e

0800116c <HCI_Event_CB>:
  if(hci_pckt->type != HCI_EVENT_PKT)
 800116c:	7802      	ldrb	r2, [r0, #0]
 800116e:	2a04      	cmp	r2, #4
{
 8001170:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 8001172:	d12d      	bne.n	80011d0 <HCI_Event_CB+0x64>
  switch(event_pckt->evt){
 8001174:	7842      	ldrb	r2, [r0, #1]
 8001176:	2a3e      	cmp	r2, #62	; 0x3e
 8001178:	d005      	beq.n	8001186 <HCI_Event_CB+0x1a>
 800117a:	2aff      	cmp	r2, #255	; 0xff
 800117c:	d00c      	beq.n	8001198 <HCI_Event_CB+0x2c>
 800117e:	2a05      	cmp	r2, #5
 8001180:	d126      	bne.n	80011d0 <HCI_Event_CB+0x64>
      GAP_DisconnectionComplete_CB();
 8001182:	f7ff bdb1 	b.w	8000ce8 <GAP_DisconnectionComplete_CB>
      switch(evt->subevent){
 8001186:	78c2      	ldrb	r2, [r0, #3]
 8001188:	2a01      	cmp	r2, #1
 800118a:	d121      	bne.n	80011d0 <HCI_Event_CB+0x64>
  connected = TRUE;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HCI_Event_CB+0x68>)
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800118e:	f8b0 1005 	ldrh.w	r1, [r0, #5]
  connected = TRUE;
 8001192:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001194:	8099      	strh	r1, [r3, #4]
 8001196:	4770      	bx	lr
      switch(blue_evt->ecode){
 8001198:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800119c:	f640 4101 	movw	r1, #3073	; 0xc01
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d004      	beq.n	80011ae <HCI_Event_CB+0x42>
 80011a4:	f640 4114 	movw	r1, #3092	; 0xc14
 80011a8:	428a      	cmp	r2, r1
 80011aa:	d00d      	beq.n	80011c8 <HCI_Event_CB+0x5c>
 80011ac:	4770      	bx	lr
          if (bnrg_expansion_board == IDB05A1) {
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HCI_Event_CB+0x6c>)
 80011b0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80011b4:	7812      	ldrb	r2, [r2, #0]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data); 
 80011b6:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 80011b8:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data); 
 80011ba:	bf0c      	ite	eq
 80011bc:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data); 
 80011c0:	f103 020a 	addne.w	r2, r3, #10
 80011c4:	f7ff bfc6 	b.w	8001154 <Attribute_Modified_CB>
          Read_Request_CB(pr->attr_handle);                    
 80011c8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80011cc:	f7ff bd98 	b.w	8000d00 <Read_Request_CB>
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200000a0 	.word	0x200000a0
 80011d8:	2000009c 	.word	0x2000009c

080011dc <HAL_SPI_MspInit>:
 *         communication with the BlueNRG Expansion Board.
 * @param  hspi: SPI handle.
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 80011e0:	6802      	ldr	r2, [r0, #0]
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_SPI_MspInit+0x154>)
 80011e4:	429a      	cmp	r2, r3
{
 80011e6:	b08c      	sub	sp, #48	; 0x30
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 80011e8:	f040 809f 	bne.w	800132a <HAL_SPI_MspInit+0x14e>
  {
    /* Enable peripherals clock */

    /* Enable GPIO Ports Clock */  
    BNRG_SPI_RESET_CLK_ENABLE();
 80011ec:	f503 4360 	add.w	r3, r3, #57344	; 0xe000

    /* Reset */
    GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
    GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
    GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
    GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 80011f0:	2400      	movs	r4, #0
    BNRG_SPI_RESET_CLK_ENABLE();
 80011f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80011fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fc:	f002 0201 	and.w	r2, r2, #1
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	9a00      	ldr	r2, [sp, #0]
    BNRG_SPI_SCLK_CLK_ENABLE();
 8001204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001206:	f042 0202 	orr.w	r2, r2, #2
 800120a:	64da      	str	r2, [r3, #76]	; 0x4c
 800120c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120e:	f002 0202 	and.w	r2, r2, #2
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	9a01      	ldr	r2, [sp, #4]
    BNRG_SPI_MISO_CLK_ENABLE();
 8001216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	64da      	str	r2, [r3, #76]	; 0x4c
 800121e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001220:	f002 0201 	and.w	r2, r2, #1
 8001224:	9202      	str	r2, [sp, #8]
 8001226:	9a02      	ldr	r2, [sp, #8]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8001228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001232:	f002 0201 	and.w	r2, r2, #1
 8001236:	9203      	str	r2, [sp, #12]
 8001238:	9a03      	ldr	r2, [sp, #12]
    BNRG_SPI_CS_CLK_ENABLE();
 800123a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	64da      	str	r2, [r3, #76]	; 0x4c
 8001242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001244:	f002 0201 	and.w	r2, r2, #1
 8001248:	9204      	str	r2, [sp, #16]
 800124a:	9a04      	ldr	r2, [sp, #16]
    BNRG_SPI_IRQ_CLK_ENABLE();
 800124c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	64da      	str	r2, [r3, #76]	; 0x4c
 8001254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001256:	f002 0201 	and.w	r2, r2, #1
 800125a:	9205      	str	r2, [sp, #20]
 800125c:	9a05      	ldr	r2, [sp, #20]
    BNRG_SPI_CLK_ENABLE();
 800125e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001264:	661a      	str	r2, [r3, #96]	; 0x60
 8001266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 8001268:	940a      	str	r4, [sp, #40]	; 0x28
    BNRG_SPI_CLK_ENABLE();
 800126a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 800126e:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 8001270:	f44f 7680 	mov.w	r6, #256	; 0x100
    BNRG_SPI_CLK_ENABLE();
 8001274:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
    HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);	
 8001276:	a907      	add	r1, sp, #28
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    BNRG_SPI_CLK_ENABLE();
 800127c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 800127e:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 8001280:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 8001282:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 8001284:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);	
 8001286:	f000 faeb 	bl	8001860 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);	/*Added to avoid spurious interrupt from the BlueNRG */
 800128a:	4622      	mov	r2, r4
 800128c:	4631      	mov	r1, r6
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f000 fbc7 	bl	8001a24 <HAL_GPIO_WritePin>

    /* SCLK */
    GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8001296:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = BNRG_SPI_SCLK_PULL;
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8001298:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
 800129a:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 800129c:	f04f 0805 	mov.w	r8, #5
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 80012a0:	a907      	add	r1, sp, #28
 80012a2:	4824      	ldr	r0, [pc, #144]	; (8001334 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
 80012a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 80012a6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = BNRG_SPI_SCLK_PULL;
 80012a8:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 80012aa:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 80012ac:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 80012b0:	f000 fad6 	bl	8001860 <HAL_GPIO_Init>

    /* MISO */
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 80012b4:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
    GPIO_InitStruct.Pull = BNRG_SPI_MISO_PULL;
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 80012b6:	a907      	add	r1, sp, #28
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 80012bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 80012be:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = BNRG_SPI_MISO_PULL;
 80012c0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 80012c2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 80012c4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 80012c8:	f000 faca 	bl	8001860 <HAL_GPIO_Init>

    /* MOSI */
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 80012cc:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
    GPIO_InitStruct.Pull = BNRG_SPI_MOSI_PULL;
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80012ce:	a907      	add	r1, sp, #28
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 80012d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 80012d6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = BNRG_SPI_MOSI_PULL;
 80012d8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 80012da:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 80012dc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80012e0:	f000 fabe 	bl	8001860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_CS_PIN;
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
    GPIO_InitStruct.Pull = BNRG_SPI_CS_PULL;
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 80012e4:	a907      	add	r1, sp, #28
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = BNRG_SPI_CS_PIN;
 80012ea:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 80012ec:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = BNRG_SPI_CS_PULL;
 80012ee:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 80012f0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 80012f2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 80012f4:	f000 fab4 	bl	8001860 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80012f8:	462a      	mov	r2, r5
 80012fa:	4639      	mov	r1, r7
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f000 fb90 	bl	8001a24 <HAL_GPIO_WritePin>

    /* IRQ -- INPUT */
    GPIO_InitStruct.Pin = BNRG_SPI_IRQ_PIN;
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_SPI_MspInit+0x15c>)
 8001306:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = BNRG_SPI_IRQ_PULL;
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8001308:	a907      	add	r1, sp, #28
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = BNRG_SPI_IRQ_PIN;
 800130e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = BNRG_SPI_IRQ_PULL;
 8001310:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 8001312:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 8001314:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8001316:	f000 faa3 	bl	8001860 <HAL_GPIO_Init>

    /* Configure the NVIC for SPI */  
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 3, 0);    
 800131a:	2006      	movs	r0, #6
 800131c:	4622      	mov	r2, r4
 800131e:	4631      	mov	r1, r6
 8001320:	f000 fa3a 	bl	8001798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fa6b 	bl	8001800 <HAL_NVIC_EnableIRQ>
  }
}
 800132a:	b00c      	add	sp, #48	; 0x30
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001330:	40013000 	.word	0x40013000
 8001334:	48000400 	.word	0x48000400
 8001338:	10110000 	.word	0x10110000

0800133c <NMI_Handler>:
 800133c:	4770      	bx	lr

0800133e <HardFault_Handler>:
  * @brief  HardFault_Handler This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800133e:	e7fe      	b.n	800133e <HardFault_Handler>

08001340 <SVC_Handler>:
 8001340:	4770      	bx	lr

08001342 <DebugMon_Handler>:
 8001342:	4770      	bx	lr

08001344 <PendSV_Handler>:
  * @brief  PendSV_Handler This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Handler>:
  * @brief  SysTick_Handler This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001348:	b508      	push	{r3, lr}
  HAL_IncTick();
 800134a:	f000 f9f7 	bl	800173c <HAL_IncTick>
  
  ms_counter++;
 800134e:	4a02      	ldr	r2, [pc, #8]	; (8001358 <SysTick_Handler+0x10>)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	bd08      	pop	{r3, pc}
 8001358:	200000b8 	.word	0x200000b8

0800135c <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void BNRG_SPI_EXTI_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 800135c:	2001      	movs	r0, #1
 800135e:	f000 bb6b 	b.w	8001a38 <HAL_GPIO_EXTI_IRQHandler>
	...

08001364 <EXTI15_10_IRQHandler>:
  * @brief  This function handles the Push Button interrupt request.
  * @param  None
  * @retval None
  */
void PUSH_BUTTON_EXTI_IRQHandler(void)
{
 8001364:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8001366:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800136a:	f000 fb65 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
  
  button_event = 1;
 800136e:	4b02      	ldr	r3, [pc, #8]	; (8001378 <EXTI15_10_IRQHandler+0x14>)
 8001370:	2201      	movs	r2, #1
 8001372:	711a      	strb	r2, [r3, #4]
 8001374:	bd08      	pop	{r3, pc}
 8001376:	bf00      	nop
 8001378:	200000b8 	.word	0x200000b8

0800137c <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  *            @arg  LED2 or LED4 on Nucleo-64 with external SMPS
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800137c:	b510      	push	{r4, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001382:	2214      	movs	r2, #20
 8001384:	2100      	movs	r1, #0
 8001386:	a801      	add	r0, sp, #4
 8001388:	f001 fefd 	bl	8003186 <memset>

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800138c:	b94c      	cbnz	r4, 80013a2 <BSP_LED_Init+0x26>
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <BSP_LED_Init+0x44>)
 8001390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	64da      	str	r2, [r3, #76]	; 0x4c
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = GPIO_PIN[Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <BSP_LED_Init+0x48>)
  GPIO_InitStruct.Pin   = GPIO_PIN[Led];
 80013a4:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013a6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
  GPIO_InitStruct.Pin   = GPIO_PIN[Led];
 80013aa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013b0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013b4:	6840      	ldr	r0, [r0, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013b8:	f000 fa52 	bl	8001860 <HAL_GPIO_Init>
}
 80013bc:	b006      	add	sp, #24
 80013be:	bd10      	pop	{r4, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000008 	.word	0x20000008

080013c8 <BSP_LED_Toggle>:
  *            @arg  LED2 or LED4 on Nucleo-64 with external SMPS
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <BSP_LED_Toggle+0x10>)
 80013ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80013ce:	2120      	movs	r1, #32
 80013d0:	6840      	ldr	r0, [r0, #4]
 80013d2:	f000 bb2c 	b.w	8001a2e <HAL_GPIO_TogglePin>
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008

080013dc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013dc:	b530      	push	{r4, r5, lr}
 80013de:	b087      	sub	sp, #28
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	2214      	movs	r2, #20
 80013e6:	2100      	movs	r1, #0
 80013e8:	a801      	add	r0, sp, #4
 80013ea:	f001 fecc 	bl	8003186 <memset>

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80013ee:	b94c      	cbnz	r4, 8001404 <BSP_PB_Init+0x28>
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <BSP_PB_Init+0x78>)
 80013f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f4:	f042 0204 	orr.w	r2, r2, #4
 80013f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	9b00      	ldr	r3, [sp, #0]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001404:	b96d      	cbnz	r5, 8001422 <BSP_PB_Init+0x46>
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode   = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull   = GPIO_NOPULL;
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;

    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001406:	4814      	ldr	r0, [pc, #80]	; (8001458 <BSP_PB_Init+0x7c>)
 8001408:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 800140c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001410:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8001414:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001416:	6880      	ldr	r0, [r0, #8]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8001418:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800141a:	f000 fa21 	bl	8001860 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 800141e:	b007      	add	sp, #28
 8001420:	bd30      	pop	{r4, r5, pc}
  else if (ButtonMode == BUTTON_MODE_EXTI)
 8001422:	2d01      	cmp	r5, #1
 8001424:	d1fb      	bne.n	800141e <BSP_PB_Init+0x42>
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <BSP_PB_Init+0x7c>)
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800142c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    GPIO_InitStruct.Pin    = BUTTON_PIN[Button];
 8001430:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode   = GPIO_MODE_IT_FALLING;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <BSP_PB_Init+0x80>)
 8001434:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001436:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8001438:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800143a:	6880      	ldr	r0, [r0, #8]
    GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_HIGH;
 800143c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800143e:	f000 fa0f 	bl	8001860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	210f      	movs	r1, #15
 8001446:	2028      	movs	r0, #40	; 0x28
 8001448:	f000 f9a6 	bl	8001798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800144c:	2028      	movs	r0, #40	; 0x28
 800144e:	f000 f9d7 	bl	8001800 <HAL_NVIC_EnableIRQ>
}
 8001452:	e7e4      	b.n	800141e <BSP_PB_Init+0x42>
 8001454:	40021000 	.word	0x40021000
 8001458:	20000008 	.word	0x20000008
 800145c:	10210000 	.word	0x10210000

08001460 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval Button state.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001460:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <BSP_PB_GetState+0x14>)
 8001464:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146c:	6880      	ldr	r0, [r0, #8]
 800146e:	f000 fad3 	bl	8001a18 <HAL_GPIO_ReadPin>
}
 8001472:	bd08      	pop	{r3, pc}
 8001474:	20000008 	.word	0x20000008

08001478 <BNRG_SPI_Init>:
 * @param  None
 * @retval None
 */
void BNRG_SPI_Init(void)
{
  SpiHandle.Instance = BNRG_SPI_INSTANCE;
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <BNRG_SPI_Init+0x34>)
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <BNRG_SPI_Init+0x38>)
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
  SpiHandle.Init.DataSize = BNRG_SPI_DATASIZE;
 800147c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001480:	60c2      	str	r2, [r0, #12]
  SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
  SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
  SpiHandle.Init.NSS = BNRG_SPI_NSS;
 8001482:	f44f 7200 	mov.w	r2, #512	; 0x200
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 8001486:	f44f 7c82 	mov.w	ip, #260	; 0x104
  SpiHandle.Init.NSS = BNRG_SPI_NSS;
 800148a:	6182      	str	r2, [r0, #24]
  SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
  SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
  SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 800148c:	2207      	movs	r2, #7
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 800148e:	e880 1008 	stmia.w	r0, {r3, ip}
  SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8001492:	62c2      	str	r2, [r0, #44]	; 0x2c
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
 8001494:	2300      	movs	r3, #0
  SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8001496:	2218      	movs	r2, #24
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
 8001498:	6083      	str	r3, [r0, #8]
  SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
 800149a:	6103      	str	r3, [r0, #16]
  SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
 800149c:	6143      	str	r3, [r0, #20]
  SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
 800149e:	6203      	str	r3, [r0, #32]
  SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
 80014a0:	6243      	str	r3, [r0, #36]	; 0x24
  SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 80014a2:	61c2      	str	r2, [r0, #28]
  SpiHandle.Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 80014a4:	6283      	str	r3, [r0, #40]	; 0x28
  
  HAL_SPI_Init(&SpiHandle);
 80014a6:	f000 beef 	b.w	8002288 <HAL_SPI_Init>
 80014aa:	bf00      	nop
 80014ac:	200003b0 	.word	0x200003b0
 80014b0:	40013000 	.word	0x40013000

080014b4 <BlueNRG_RST>:
 * @brief  Resets the BlueNRG.
 * @param  None
 * @retval None
 */
void BlueNRG_RST(void)
{
 80014b4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f000 fab0 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80014c4:	2005      	movs	r0, #5
 80014c6:	f000 f947 	bl	8001758 <HAL_Delay>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	f000 faa6 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80014d8:	2005      	movs	r0, #5
}
 80014da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(5);
 80014de:	f000 b93b 	b.w	8001758 <HAL_Delay>

080014e2 <BlueNRG_DataPresent>:
 * @param  None
 * @retval 1 if data are present, 0 otherwise
 */
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 80014e2:	b508      	push	{r3, lr}
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 80014e4:	2101      	movs	r1, #1
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fa95 	bl	8001a18 <HAL_GPIO_ReadPin>
      return 1;
  else  
      return 0;
} /* end BlueNRG_DataPresent() */
 80014ee:	1e43      	subs	r3, r0, #1
 80014f0:	4258      	negs	r0, r3
 80014f2:	4158      	adcs	r0, r3
 80014f4:	bd08      	pop	{r3, pc}
	...

080014f8 <BlueNRG_SPI_Read_All>:
 * @param  buff_size: Buffer size
 * @retval int32_t  : Number of read bytes
 */
int32_t BlueNRG_SPI_Read_All(uint8_t *buffer,
                             uint8_t buff_size)
{
 80014f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014fc:	b088      	sub	sp, #32
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80014fe:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 8001500:	23ff      	movs	r3, #255	; 0xff
 8001502:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001506:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001508:	230b      	movs	r3, #11
{
 800150a:	4607      	mov	r7, r0
 800150c:	460d      	mov	r5, r1
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001514:	f88d 3010 	strb.w	r3, [sp, #16]
 8001518:	f88d 4011 	strb.w	r4, [sp, #17]
 800151c:	f88d 4012 	strb.w	r4, [sp, #18]
 8001520:	f88d 4013 	strb.w	r4, [sp, #19]
 8001524:	f88d 4014 	strb.w	r4, [sp, #20]
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001528:	f000 fa7c 	bl	8001a24 <HAL_GPIO_WritePin>

  /* Read the header */  
  HAL_SPI_TransmitReceive(&SpiHandle, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 800152c:	230f      	movs	r3, #15
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	aa06      	add	r2, sp, #24
 8001532:	2305      	movs	r3, #5
 8001534:	a904      	add	r1, sp, #16
 8001536:	481e      	ldr	r0, [pc, #120]	; (80015b0 <BlueNRG_SPI_Read_All+0xb8>)
 8001538:	f000 fef7 	bl	800232a <HAL_SPI_TransmitReceive>
  	
  if (header_slave[0] == 0x02) {
 800153c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d12d      	bne.n	80015a0 <BlueNRG_SPI_Read_All+0xa8>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 8001544:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8001548:	f89d 301b 	ldrb.w	r3, [sp, #27]
  
    if (byte_count > 0) {
 800154c:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 8001550:	d028      	beq.n	80015a4 <BlueNRG_SPI_Read_All+0xac>
 8001552:	4285      	cmp	r5, r0
      if (byte_count > buff_size){
        byte_count = buff_size;
      }
  
      for (len = 0; len < byte_count; len++){                                               
        HAL_SPI_TransmitReceive(&SpiHandle, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION); 
 8001554:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80015b0 <BlueNRG_SPI_Read_All+0xb8>
 8001558:	bf28      	it	cs
 800155a:	4605      	movcs	r5, r0
 800155c:	b2e6      	uxtb	r6, r4
      for (len = 0; len < byte_count; len++){                                               
 800155e:	42ae      	cmp	r6, r5
 8001560:	f104 0401 	add.w	r4, r4, #1
 8001564:	d30e      	bcc.n	8001584 <BlueNRG_SPI_Read_All+0x8c>
      }                                                                                     
      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f000 fa59 	bl	8001a24 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 8001572:	2300      	movs	r3, #0
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	9b03      	ldr	r3, [sp, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	dd15      	ble.n	80015a8 <BlueNRG_SPI_Read_All+0xb0>
  }
#endif /* OPTIMIZED_SPI */
  
  return len;  
#endif
}
 800157c:	4630      	mov	r0, r6
 800157e:	b008      	add	sp, #32
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_SPI_TransmitReceive(&SpiHandle, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION); 
 8001584:	230f      	movs	r3, #15
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	f10d 020b 	add.w	r2, sp, #11
 800158c:	2301      	movs	r3, #1
 800158e:	f10d 010a 	add.w	r1, sp, #10
 8001592:	4640      	mov	r0, r8
 8001594:	f000 fec9 	bl	800232a <HAL_SPI_TransmitReceive>
        buffer[len] = read_char;                                                            
 8001598:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800159c:	55bb      	strb	r3, [r7, r6]
 800159e:	e7dd      	b.n	800155c <BlueNRG_SPI_Read_All+0x64>
  uint8_t len = 0;
 80015a0:	4626      	mov	r6, r4
 80015a2:	e7e0      	b.n	8001566 <BlueNRG_SPI_Read_All+0x6e>
 80015a4:	4606      	mov	r6, r0
 80015a6:	e7de      	b.n	8001566 <BlueNRG_SPI_Read_All+0x6e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80015a8:	bf00      	nop
  for(volatile int i = 0; i < 2; i++)__NOP();
 80015aa:	9b03      	ldr	r3, [sp, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	e7e1      	b.n	8001574 <BlueNRG_SPI_Read_All+0x7c>
 80015b0:	200003b0 	.word	0x200003b0

080015b4 <Enable_SPI_IRQ>:
 * @param  None
 * @retval None
 */
void Enable_SPI_IRQ(void)
{
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);  
 80015b4:	2006      	movs	r0, #6
 80015b6:	f000 b923 	b.w	8001800 <HAL_NVIC_EnableIRQ>

080015ba <Disable_SPI_IRQ>:
 * @param  None
 * @retval None
 */
void Disable_SPI_IRQ(void)
{ 
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80015ba:	2006      	movs	r0, #6
 80015bc:	f000 b92c 	b.w	8001818 <HAL_NVIC_DisableIRQ>

080015c0 <BlueNRG_SPI_Write>:
{  
 80015c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c4:	b0c6      	sub	sp, #280	; 0x118
 80015c6:	461c      	mov	r4, r3
  unsigned char header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80015c8:	230a      	movs	r3, #10
 80015ca:	2500      	movs	r5, #0
 80015cc:	f88d 3008 	strb.w	r3, [sp, #8]
  unsigned char header_slave[HEADER_SIZE]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
 80015d0:	23aa      	movs	r3, #170	; 0xaa
 80015d2:	f88d 3010 	strb.w	r3, [sp, #16]
{  
 80015d6:	4680      	mov	r8, r0
 80015d8:	460f      	mov	r7, r1
 80015da:	4616      	mov	r6, r2
  unsigned char header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80015dc:	f88d 5009 	strb.w	r5, [sp, #9]
 80015e0:	f88d 500a 	strb.w	r5, [sp, #10]
 80015e4:	f88d 500b 	strb.w	r5, [sp, #11]
 80015e8:	f88d 500c 	strb.w	r5, [sp, #12]
  unsigned char header_slave[HEADER_SIZE]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
 80015ec:	f88d 5011 	strb.w	r5, [sp, #17]
 80015f0:	f88d 5012 	strb.w	r5, [sp, #18]
 80015f4:	f88d 5013 	strb.w	r5, [sp, #19]
 80015f8:	f88d 5014 	strb.w	r5, [sp, #20]
  Disable_SPI_IRQ(); 
 80015fc:	f7ff ffdd 	bl	80015ba <Disable_SPI_IRQ>
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001600:	462a      	mov	r2, r5
 8001602:	2102      	movs	r1, #2
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_SPI_TransmitReceive(&SpiHandle, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8001608:	250f      	movs	r5, #15
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 800160a:	f000 fa0b 	bl	8001a24 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 800160e:	2305      	movs	r3, #5
 8001610:	9500      	str	r5, [sp, #0]
 8001612:	aa04      	add	r2, sp, #16
 8001614:	a902      	add	r1, sp, #8
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <BlueNRG_SPI_Write+0xb8>)
 8001618:	f000 fe87 	bl	800232a <HAL_SPI_TransmitReceive>
  if (header_slave[0] == 0x02) {
 800161c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d122      	bne.n	800166a <BlueNRG_SPI_Write+0xaa>
    if (header_slave[1] >= (Nb_bytes1+Nb_bytes2)) {
 8001624:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001628:	1933      	adds	r3, r6, r4
 800162a:	429a      	cmp	r2, r3
 800162c:	db20      	blt.n	8001670 <BlueNRG_SPI_Write+0xb0>
      if (Nb_bytes1 > 0) {
 800162e:	b136      	cbz	r6, 800163e <BlueNRG_SPI_Write+0x7e>
        HAL_SPI_TransmitReceive(&SpiHandle, data1, read_char_buf, Nb_bytes1, TIMEOUT_DURATION);
 8001630:	9500      	str	r5, [sp, #0]
 8001632:	4633      	mov	r3, r6
 8001634:	aa06      	add	r2, sp, #24
 8001636:	4641      	mov	r1, r8
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <BlueNRG_SPI_Write+0xb8>)
 800163a:	f000 fe76 	bl	800232a <HAL_SPI_TransmitReceive>
      if (Nb_bytes2 > 0) {
 800163e:	b144      	cbz	r4, 8001652 <BlueNRG_SPI_Write+0x92>
        HAL_SPI_TransmitReceive(&SpiHandle, data2, read_char_buf, Nb_bytes2, TIMEOUT_DURATION);
 8001640:	230f      	movs	r3, #15
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	aa06      	add	r2, sp, #24
 8001646:	4623      	mov	r3, r4
 8001648:	4639      	mov	r1, r7
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <BlueNRG_SPI_Write+0xb8>)
 800164c:	f000 fe6d 	bl	800232a <HAL_SPI_TransmitReceive>
  int32_t result = 0;  
 8001650:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2102      	movs	r1, #2
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f000 f9e3 	bl	8001a24 <HAL_GPIO_WritePin>
  Enable_SPI_IRQ();
 800165e:	f7ff ffa9 	bl	80015b4 <Enable_SPI_IRQ>
}
 8001662:	4620      	mov	r0, r4
 8001664:	b046      	add	sp, #280	; 0x118
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = -1;
 800166a:	f04f 34ff 	mov.w	r4, #4294967295
 800166e:	e7f0      	b.n	8001652 <BlueNRG_SPI_Write+0x92>
      result = -2;
 8001670:	f06f 0401 	mvn.w	r4, #1
 8001674:	e7ed      	b.n	8001652 <BlueNRG_SPI_Write+0x92>
 8001676:	bf00      	nop
 8001678:	200003b0 	.word	0x200003b0

0800167c <Hal_Write_Serial>:
{
 800167c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800167e:	4606      	mov	r6, r0
 8001680:	460f      	mov	r7, r1
  Timer_Set(&t, CLOCK_SECOND/10);
 8001682:	4668      	mov	r0, sp
 8001684:	2164      	movs	r1, #100	; 0x64
{
 8001686:	4615      	mov	r5, r2
 8001688:	461c      	mov	r4, r3
  Timer_Set(&t, CLOCK_SECOND/10);
 800168a:	f001 fd17 	bl	80030bc <Timer_Set>
    if(BlueNRG_SPI_Write((uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800168e:	b2e4      	uxtb	r4, r4
 8001690:	b2ed      	uxtb	r5, r5
 8001692:	4623      	mov	r3, r4
 8001694:	462a      	mov	r2, r5
 8001696:	4639      	mov	r1, r7
 8001698:	4630      	mov	r0, r6
 800169a:	f7ff ff91 	bl	80015c0 <BlueNRG_SPI_Write>
 800169e:	b120      	cbz	r0, 80016aa <Hal_Write_Serial+0x2e>
    if(Timer_Expired(&t)){
 80016a0:	4668      	mov	r0, sp
 80016a2:	f001 fd12 	bl	80030ca <Timer_Expired>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d0f3      	beq.n	8001692 <Hal_Write_Serial+0x16>
}
 80016aa:	b003      	add	sp, #12
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <Clear_SPI_EXTI_Flag>:
 * @param  None
 * @retval None
 */
void Clear_SPI_EXTI_Flag(void)
{  
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 80016b0:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <Clear_SPI_EXTI_Flag+0x8>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <SystemInit+0x34>)
 80016be:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016c0:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80016c8:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80016d0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80016d4:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016da:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016e4:	6199      	str	r1, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <SystemInit+0x38>)
 80016e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <HAL_MspInit>:
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_InitTick+0x24>)
{
 8001700:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001708:	fbb0 f0f3 	udiv	r0, r0, r3
 800170c:	f000 f892 	bl	8001834 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001710:	2200      	movs	r2, #0
 8001712:	4621      	mov	r1, r4
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f83e 	bl	8001798 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800171c:	2000      	movs	r0, #0
 800171e:	bd10      	pop	{r4, pc}
 8001720:	20000014 	.word	0x20000014

08001724 <HAL_Init>:
{
 8001724:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f824 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800172c:	200f      	movs	r0, #15
 800172e:	f7ff ffe5 	bl	80016fc <HAL_InitTick>
  HAL_MspInit();
 8001732:	f7ff ffe1 	bl	80016f8 <HAL_MspInit>
}
 8001736:	2000      	movs	r0, #0
 8001738:	bd08      	pop	{r3, pc}
	...

0800173c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800173c:	4a02      	ldr	r2, [pc, #8]	; (8001748 <HAL_IncTick+0xc>)
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000414 	.word	0x20000414

0800174c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <HAL_GetTick+0x8>)
 800174e:	6818      	ldr	r0, [r3, #0]
}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000414 	.word	0x20000414

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fff6 	bl	800174c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001760:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001762:	4605      	mov	r5, r0
  {
    wait++;
 8001764:	bf18      	it	ne
 8001766:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8001768:	f7ff fff0 	bl	800174c <HAL_GetTick>
 800176c:	1b40      	subs	r0, r0, r5
 800176e:	4284      	cmp	r4, r0
 8001770:	d8fa      	bhi.n	8001768 <HAL_Delay+0x10>
  {
  }
}
 8001772:	bd38      	pop	{r3, r4, r5, pc}

08001774 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001776:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001778:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001784:	0200      	lsls	r0, r0, #8
 8001786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800178e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001790:	60d3      	str	r3, [r2, #12]
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b530      	push	{r4, r5, lr}
 800179c:	68dc      	ldr	r4, [r3, #12]
 800179e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	bf28      	it	cs
 80017ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 0501 	mov.w	r5, #1
 80017b4:	fa05 f303 	lsl.w	r3, r5, r3
 80017b8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017bc:	bf8c      	ite	hi
 80017be:	3c03      	subhi	r4, #3
 80017c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c2:	4019      	ands	r1, r3
 80017c4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c6:	fa05 f404 	lsl.w	r4, r5, r4
 80017ca:	3c01      	subs	r4, #1
 80017cc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80017ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	ea42 0201 	orr.w	r2, r2, r1
 80017d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	bfaf      	iteee	ge
 80017da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	f000 000f 	andlt.w	r0, r0, #15
 80017e2:	4b06      	ldrlt	r3, [pc, #24]	; (80017fc <HAL_NVIC_SetPriority+0x64>)
 80017e4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	bfa5      	ittet	ge
 80017e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80017ec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80017f4:	bd30      	pop	{r4, r5, pc}
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	e000ed14 	.word	0xe000ed14

08001800 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001800:	0942      	lsrs	r2, r0, #5
 8001802:	2301      	movs	r3, #1
 8001804:	f000 001f 	and.w	r0, r0, #31
 8001808:	fa03 f000 	lsl.w	r0, r3, r0
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_NVIC_EnableIRQ+0x14>)
 800180e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100

08001818 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001818:	0943      	lsrs	r3, r0, #5
 800181a:	2201      	movs	r2, #1
 800181c:	f000 001f 	and.w	r0, r0, #31
 8001820:	fa02 f000 	lsl.w	r0, r2, r0
 8001824:	3320      	adds	r3, #32
 8001826:	4a02      	ldr	r2, [pc, #8]	; (8001830 <HAL_NVIC_DisableIRQ+0x18>)
 8001828:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	3801      	subs	r0, #1
 8001836:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800183a:	d20a      	bcs.n	8001852 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001840:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	21f0      	movs	r1, #240	; 0xf0
 8001844:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001864:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001866:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001a14 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186c:	4c67      	ldr	r4, [pc, #412]	; (8001a0c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800186e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8001870:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001872:	9a01      	ldr	r2, [sp, #4]
 8001874:	40da      	lsrs	r2, r3
 8001876:	d102      	bne.n	800187e <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8001878:	b005      	add	sp, #20
 800187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800187e:	2601      	movs	r6, #1
    if(iocurrent)
 8001880:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001882:	409e      	lsls	r6, r3
    if(iocurrent)
 8001884:	ea12 0e06 	ands.w	lr, r2, r6
 8001888:	f000 80b1 	beq.w	80019ee <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	684a      	ldr	r2, [r1, #4]
 800188e:	f022 0710 	bic.w	r7, r2, #16
 8001892:	2f02      	cmp	r7, #2
 8001894:	d116      	bne.n	80018c4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8001896:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800189a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800189e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80018a2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018a6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80018aa:	f04f 0c0f 	mov.w	ip, #15
 80018ae:	fa0c fc0a 	lsl.w	ip, ip, sl
 80018b2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018b6:	690d      	ldr	r5, [r1, #16]
 80018b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80018bc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80018c0:	f8c9 5020 	str.w	r5, [r9, #32]
 80018c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80018c8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80018ca:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80018ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80018d2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80018d8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018dc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80018e8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ec:	d811      	bhi.n	8001912 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80018ee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80018f0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80018f4:	68cf      	ldr	r7, [r1, #12]
 80018f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80018fa:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80018fe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001900:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001902:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001906:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800190a:	409f      	lsls	r7, r3
 800190c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001910:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001912:	f1ba 0f03 	cmp.w	sl, #3
 8001916:	d107      	bne.n	8001928 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001918:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800191a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800191e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001922:	409f      	lsls	r7, r3
 8001924:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001926:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001928:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800192a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800192c:	688e      	ldr	r6, [r1, #8]
 800192e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001932:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001934:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	00d5      	lsls	r5, r2, #3
 8001938:	d559      	bpl.n	80019ee <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800193e:	f045 0501 	orr.w	r5, r5, #1
 8001942:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001946:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800194a:	f023 0603 	bic.w	r6, r3, #3
 800194e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001952:	f005 0501 	and.w	r5, r5, #1
 8001956:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800195a:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800195c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001960:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001962:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001964:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001968:	270f      	movs	r7, #15
 800196a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800196e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001972:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001976:	d03c      	beq.n	80019f2 <HAL_GPIO_Init+0x192>
 8001978:	4d25      	ldr	r5, [pc, #148]	; (8001a10 <HAL_GPIO_Init+0x1b0>)
 800197a:	42a8      	cmp	r0, r5
 800197c:	d03b      	beq.n	80019f6 <HAL_GPIO_Init+0x196>
 800197e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001982:	42a8      	cmp	r0, r5
 8001984:	d039      	beq.n	80019fa <HAL_GPIO_Init+0x19a>
 8001986:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800198a:	42a8      	cmp	r0, r5
 800198c:	d037      	beq.n	80019fe <HAL_GPIO_Init+0x19e>
 800198e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001992:	42a8      	cmp	r0, r5
 8001994:	d035      	beq.n	8001a02 <HAL_GPIO_Init+0x1a2>
 8001996:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800199a:	42a8      	cmp	r0, r5
 800199c:	d033      	beq.n	8001a06 <HAL_GPIO_Init+0x1a6>
 800199e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a2:	42a8      	cmp	r0, r5
 80019a4:	bf14      	ite	ne
 80019a6:	2507      	movne	r5, #7
 80019a8:	2506      	moveq	r5, #6
 80019aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80019ae:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80019b0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80019b2:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b8:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 80019ba:	bf54      	ite	pl
 80019bc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019be:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80019c2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80019c4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c6:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 80019c8:	bf54      	ite	pl
 80019ca:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019cc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80019d0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80019d2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d4:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 80019d6:	bf54      	ite	pl
 80019d8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019da:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80019de:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80019e0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e2:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80019e4:	bf54      	ite	pl
 80019e6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80019e8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80019ec:	60e5      	str	r5, [r4, #12]
    position++;
 80019ee:	3301      	adds	r3, #1
 80019f0:	e73f      	b.n	8001872 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80019f2:	2500      	movs	r5, #0
 80019f4:	e7d9      	b.n	80019aa <HAL_GPIO_Init+0x14a>
 80019f6:	2501      	movs	r5, #1
 80019f8:	e7d7      	b.n	80019aa <HAL_GPIO_Init+0x14a>
 80019fa:	2502      	movs	r5, #2
 80019fc:	e7d5      	b.n	80019aa <HAL_GPIO_Init+0x14a>
 80019fe:	2503      	movs	r5, #3
 8001a00:	e7d3      	b.n	80019aa <HAL_GPIO_Init+0x14a>
 8001a02:	2504      	movs	r5, #4
 8001a04:	e7d1      	b.n	80019aa <HAL_GPIO_Init+0x14a>
 8001a06:	2505      	movs	r5, #5
 8001a08:	e7cf      	b.n	80019aa <HAL_GPIO_Init+0x14a>
 8001a0a:	bf00      	nop
 8001a0c:	40010400 	.word	0x40010400
 8001a10:	48000400 	.word	0x48000400
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a18:	6903      	ldr	r3, [r0, #16]
 8001a1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a1c:	bf14      	ite	ne
 8001a1e:	2001      	movne	r0, #1
 8001a20:	2000      	moveq	r0, #0
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	b10a      	cbz	r2, 8001a2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a26:	6181      	str	r1, [r0, #24]
 8001a28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2a:	6281      	str	r1, [r0, #40]	; 0x28
 8001a2c:	4770      	bx	lr

08001a2e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001a2e:	6943      	ldr	r3, [r0, #20]
 8001a30:	4059      	eors	r1, r3
 8001a32:	6141      	str	r1, [r0, #20]
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a38:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001a3c:	6959      	ldr	r1, [r3, #20]
 8001a3e:	4201      	tst	r1, r0
 8001a40:	d002      	beq.n	8001a48 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a42:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a44:	f7fe fd71 	bl	800052a <HAL_GPIO_EXTI_Callback>
 8001a48:	bd08      	pop	{r3, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_PWREx_GetVoltageRange+0xc>)
 8001a52:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001a54:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000

08001a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a62:	4d1e      	ldr	r5, [pc, #120]	; (8001adc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001a64:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a66:	00da      	lsls	r2, r3, #3
{
 8001a68:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a6a:	d518      	bpl.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001a74:	d123      	bne.n	8001abe <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a76:	2c80      	cmp	r4, #128	; 0x80
 8001a78:	d929      	bls.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a7a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a7c:	bf8c      	ite	hi
 8001a7e:	2002      	movhi	r0, #2
 8001a80:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f023 0307 	bic.w	r3, r3, #7
 8001a8a:	4303      	orrs	r3, r0
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001a94:	1a18      	subs	r0, r3, r0
 8001a96:	bf18      	it	ne
 8001a98:	2001      	movne	r0, #1
 8001a9a:	b003      	add	sp, #12
 8001a9c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	65ab      	str	r3, [r5, #88]	; 0x58
 8001aa6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001ab0:	f7ff ffce 	bl	8001a50 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aba:	65ab      	str	r3, [r5, #88]	; 0x58
 8001abc:	e7d8      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001abe:	2c80      	cmp	r4, #128	; 0x80
 8001ac0:	d807      	bhi.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001ac2:	d008      	beq.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001ac4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001ac8:	4258      	negs	r0, r3
 8001aca:	4158      	adcs	r0, r3
 8001acc:	e7d9      	b.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e7d7      	b.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	e7d5      	b.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	e7d3      	b.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	f012 0f0c 	tst.w	r2, #12
{
 8001aec:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001aee:	d009      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001af6:	2a0c      	cmp	r2, #12
 8001af8:	d12d      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	2a01      	cmp	r2, #1
 8001b02:	d128      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001b04:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001b06:	4928      	ldr	r1, [pc, #160]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001b08:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b0a:	bf55      	itete	pl
 8001b0c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b10:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b12:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b16:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001b1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001b1e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001b20:	f011 0f0c 	tst.w	r1, #12
 8001b24:	bf0c      	ite	eq
 8001b26:	4610      	moveq	r0, r2
 8001b28:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	f001 010c 	and.w	r1, r1, #12
 8001b30:	290c      	cmp	r1, #12
 8001b32:	d130      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b34:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b36:	68d8      	ldr	r0, [r3, #12]
 8001b38:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001b3c:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b3e:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001b42:	2802      	cmp	r0, #2
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x96>
 8001b46:	2803      	cmp	r0, #3
 8001b48:	d026      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b4a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b4e:	68d8      	ldr	r0, [r3, #12]
 8001b50:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001b54:	e017      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	f002 020c 	and.w	r2, r2, #12
 8001b5c:	2a04      	cmp	r2, #4
 8001b5e:	d007      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	f002 020c 	and.w	r2, r2, #12
 8001b66:	2a08      	cmp	r2, #8
 8001b68:	d104      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	e7dc      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001b70:	480f      	ldr	r0, [pc, #60]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b72:	e7fb      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001b74:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001b76:	4602      	mov	r2, r0
 8001b78:	e7d7      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b7e:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b82:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001b8c:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8e:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b90:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001b92:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b96:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b9c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001ba0:	e7ef      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x9e>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08003340 	.word	0x08003340
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	00f42400 	.word	0x00f42400

08001bb4 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb4:	6803      	ldr	r3, [r0, #0]
{
 8001bb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001bba:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bbc:	06d8      	lsls	r0, r3, #27
 8001bbe:	d53b      	bpl.n	8001c38 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001bc0:	4ca9      	ldr	r4, [pc, #676]	; (8001e68 <HAL_RCC_OscConfig+0x2b4>)
 8001bc2:	68a3      	ldr	r3, [r4, #8]
 8001bc4:	f013 0f0c 	tst.w	r3, #12
 8001bc8:	d160      	bne.n	8001c8c <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	0799      	lsls	r1, r3, #30
 8001bce:	d505      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x28>
 8001bd0:	69ab      	ldr	r3, [r5, #24]
 8001bd2:	b91b      	cbnz	r3, 8001bdc <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8001bd4:	2001      	movs	r0, #1
}
 8001bd6:	b002      	add	sp, #8
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	6a28      	ldr	r0, [r5, #32]
 8001be0:	071a      	lsls	r2, r3, #28
 8001be2:	bf56      	itet	pl
 8001be4:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001be8:	6823      	ldrmi	r3, [r4, #0]
 8001bea:	091b      	lsrpl	r3, r3, #4
 8001bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf0:	4283      	cmp	r3, r0
 8001bf2:	d236      	bcs.n	8001c62 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf4:	f7ff ff34 	bl	8001a60 <RCC_SetFlashLatencyFromMSIRange>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6023      	str	r3, [r4, #0]
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	6a2a      	ldr	r2, [r5, #32]
 8001c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c10:	6863      	ldr	r3, [r4, #4]
 8001c12:	69ea      	ldr	r2, [r5, #28]
 8001c14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c1c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f7ff ff61 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001c22:	68a3      	ldr	r3, [r4, #8]
 8001c24:	4a91      	ldr	r2, [pc, #580]	; (8001e6c <HAL_RCC_OscConfig+0x2b8>)
 8001c26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	40d8      	lsrs	r0, r3
 8001c2e:	4b90      	ldr	r3, [pc, #576]	; (8001e70 <HAL_RCC_OscConfig+0x2bc>)
 8001c30:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f7ff fd62 	bl	80016fc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	07de      	lsls	r6, r3, #31
 8001c3c:	d45b      	bmi.n	8001cf6 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	682b      	ldr	r3, [r5, #0]
 8001c40:	079c      	lsls	r4, r3, #30
 8001c42:	f100 80a3 	bmi.w	8001d8c <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	682b      	ldr	r3, [r5, #0]
 8001c48:	0719      	lsls	r1, r3, #28
 8001c4a:	f100 80e1 	bmi.w	8001e10 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	075a      	lsls	r2, r3, #29
 8001c52:	f100 810f 	bmi.w	8001e74 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c56:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	f040 8176 	bne.w	8001f4a <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	e7b9      	b.n	8001bd6 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6023      	str	r3, [r4, #0]
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c70:	4303      	orrs	r3, r0
 8001c72:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c74:	6863      	ldr	r3, [r4, #4]
 8001c76:	69ea      	ldr	r2, [r5, #28]
 8001c78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c80:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c82:	f7ff feed 	bl	8001a60 <RCC_SetFlashLatencyFromMSIRange>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0c9      	beq.n	8001c1e <HAL_RCC_OscConfig+0x6a>
 8001c8a:	e7a3      	b.n	8001bd4 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c8c:	69ab      	ldr	r3, [r5, #24]
 8001c8e:	b313      	cbz	r3, 8001cd6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c98:	f7ff fd58 	bl	800174c <HAL_GetTick>
 8001c9c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	079b      	lsls	r3, r3, #30
 8001ca2:	d511      	bpl.n	8001cc8 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6023      	str	r3, [r4, #0]
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	6a2a      	ldr	r2, [r5, #32]
 8001cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	69ea      	ldr	r2, [r5, #28]
 8001cbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	e7b7      	b.n	8001c38 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fd40 	bl	800174c <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9e5      	bls.n	8001c9e <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	e77f      	b.n	8001bd6 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cde:	f7ff fd35 	bl	800174c <HAL_GetTick>
 8001ce2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	079f      	lsls	r7, r3, #30
 8001ce8:	d5a6      	bpl.n	8001c38 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cea:	f7ff fd2f 	bl	800174c <HAL_GetTick>
 8001cee:	1b80      	subs	r0, r0, r6
 8001cf0:	2802      	cmp	r0, #2
 8001cf2:	d9f7      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x130>
 8001cf4:	e7ed      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001cf6:	4c5c      	ldr	r4, [pc, #368]	; (8001e68 <HAL_RCC_OscConfig+0x2b4>)
 8001cf8:	68a3      	ldr	r3, [r4, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d02:	68a3      	ldr	r3, [r4, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	68e3      	ldr	r3, [r4, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	0398      	lsls	r0, r3, #14
 8001d1a:	d590      	bpl.n	8001c3e <HAL_RCC_OscConfig+0x8a>
 8001d1c:	686b      	ldr	r3, [r5, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d18d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x8a>
 8001d22:	e757      	b.n	8001bd4 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d24:	686b      	ldr	r3, [r5, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d110      	bne.n	8001d4e <HAL_RCC_OscConfig+0x19a>
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d34:	f7ff fd0a 	bl	800174c <HAL_GetTick>
 8001d38:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	0399      	lsls	r1, r3, #14
 8001d3e:	f53f af7e 	bmi.w	8001c3e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d42:	f7ff fd03 	bl	800174c <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2864      	cmp	r0, #100	; 0x64
 8001d4a:	d9f6      	bls.n	8001d3a <HAL_RCC_OscConfig+0x186>
 8001d4c:	e7c1      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d52:	d104      	bne.n	8001d5e <HAL_RCC_OscConfig+0x1aa>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5a:	6023      	str	r3, [r4, #0]
 8001d5c:	e7e6      	b.n	8001d2c <HAL_RCC_OscConfig+0x178>
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d64:	6022      	str	r2, [r4, #0]
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d6c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8001d72:	f7ff fceb 	bl	800174c <HAL_GetTick>
 8001d76:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	039a      	lsls	r2, r3, #14
 8001d7c:	f57f af5f 	bpl.w	8001c3e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fce4 	bl	800174c <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	2864      	cmp	r0, #100	; 0x64
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1c4>
 8001d8a:	e7a2      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001d8c:	4c36      	ldr	r4, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x2b4>)
 8001d8e:	68a3      	ldr	r3, [r4, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d009      	beq.n	8001dac <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d98:	68a3      	ldr	r3, [r4, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d113      	bne.n	8001dca <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d10e      	bne.n	8001dca <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	d503      	bpl.n	8001dba <HAL_RCC_OscConfig+0x206>
 8001db2:	68eb      	ldr	r3, [r5, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f43f af0d 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	6863      	ldr	r3, [r4, #4]
 8001dbc:	692a      	ldr	r2, [r5, #16]
 8001dbe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001dc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dc6:	6063      	str	r3, [r4, #4]
 8001dc8:	e73d      	b.n	8001c46 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dca:	68eb      	ldr	r3, [r5, #12]
 8001dcc:	b17b      	cbz	r3, 8001dee <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fcb9 	bl	800174c <HAL_GetTick>
 8001dda:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	055f      	lsls	r7, r3, #21
 8001de0:	d4eb      	bmi.n	8001dba <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fcb3 	bl	800174c <HAL_GetTick>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	2802      	cmp	r0, #2
 8001dea:	d9f7      	bls.n	8001ddc <HAL_RCC_OscConfig+0x228>
 8001dec:	e771      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001df6:	f7ff fca9 	bl	800174c <HAL_GetTick>
 8001dfa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	0558      	lsls	r0, r3, #21
 8001e00:	f57f af21 	bpl.w	8001c46 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fca2 	bl	800174c <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	2802      	cmp	r0, #2
 8001e0c:	d9f6      	bls.n	8001dfc <HAL_RCC_OscConfig+0x248>
 8001e0e:	e760      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e10:	696b      	ldr	r3, [r5, #20]
 8001e12:	4c15      	ldr	r4, [pc, #84]	; (8001e68 <HAL_RCC_OscConfig+0x2b4>)
 8001e14:	b19b      	cbz	r3, 8001e3e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8001e16:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e22:	f7ff fc93 	bl	800174c <HAL_GetTick>
 8001e26:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001e28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e2c:	079b      	lsls	r3, r3, #30
 8001e2e:	f53f af0e 	bmi.w	8001c4e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff fc8b 	bl	800174c <HAL_GetTick>
 8001e36:	1b80      	subs	r0, r0, r6
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d9f5      	bls.n	8001e28 <HAL_RCC_OscConfig+0x274>
 8001e3c:	e749      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fc7f 	bl	800174c <HAL_GetTick>
 8001e4e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001e50:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e54:	079f      	lsls	r7, r3, #30
 8001e56:	f57f aefa 	bpl.w	8001c4e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fc77 	bl	800174c <HAL_GetTick>
 8001e5e:	1b80      	subs	r0, r0, r6
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d9f5      	bls.n	8001e50 <HAL_RCC_OscConfig+0x29c>
 8001e64:	e735      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08003370 	.word	0x08003370
 8001e70:	20000014 	.word	0x20000014
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e74:	4c66      	ldr	r4, [pc, #408]	; (8002010 <HAL_RCC_OscConfig+0x45c>)
 8001e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e78:	00de      	lsls	r6, r3, #3
 8001e7a:	d427      	bmi.n	8001ecc <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e82:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e8e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e90:	4e60      	ldr	r6, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x460>)
 8001e92:	6833      	ldr	r3, [r6, #0]
 8001e94:	05d8      	lsls	r0, r3, #23
 8001e96:	d51b      	bpl.n	8001ed0 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	68ab      	ldr	r3, [r5, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d129      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x33e>
 8001e9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fc4f 	bl	800174c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001eb2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001eb4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001eb8:	079a      	lsls	r2, r3, #30
 8001eba:	d540      	bpl.n	8001f3e <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	f43f aeca 	beq.w	8001c56 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eca:	e6c4      	b.n	8001c56 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001ecc:	2700      	movs	r7, #0
 8001ece:	e7df      	b.n	8001e90 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed0:	6833      	ldr	r3, [r6, #0]
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fc38 	bl	800174c <HAL_GetTick>
 8001edc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	6833      	ldr	r3, [r6, #0]
 8001ee0:	05d9      	lsls	r1, r3, #23
 8001ee2:	d4d9      	bmi.n	8001e98 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7ff fc32 	bl	800174c <HAL_GetTick>
 8001ee8:	eba0 0008 	sub.w	r0, r0, r8
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f6      	bls.n	8001ede <HAL_RCC_OscConfig+0x32a>
 8001ef0:	e6ef      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x350>
 8001ef6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001f02:	e7cc      	b.n	8001e9e <HAL_RCC_OscConfig+0x2ea>
 8001f04:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001f10:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f14:	f022 0204 	bic.w	r2, r2, #4
 8001f18:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1c4      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001f20:	f7ff fc14 	bl	800174c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f28:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001f2a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f2e:	079b      	lsls	r3, r3, #30
 8001f30:	d5c4      	bpl.n	8001ebc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fc0b 	bl	800174c <HAL_GetTick>
 8001f36:	1b80      	subs	r0, r0, r6
 8001f38:	4540      	cmp	r0, r8
 8001f3a:	d9f6      	bls.n	8001f2a <HAL_RCC_OscConfig+0x376>
 8001f3c:	e6c9      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fc05 	bl	800174c <HAL_GetTick>
 8001f42:	1b80      	subs	r0, r0, r6
 8001f44:	4540      	cmp	r0, r8
 8001f46:	d9b5      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x300>
 8001f48:	e6c3      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4a:	4c31      	ldr	r4, [pc, #196]	; (8002010 <HAL_RCC_OscConfig+0x45c>)
 8001f4c:	68a3      	ldr	r3, [r4, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	f43f ae3e 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001f58:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f60:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f62:	d137      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8001f64:	f7ff fbf2 	bl	800174c <HAL_GetTick>
 8001f68:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	019f      	lsls	r7, r3, #6
 8001f6e:	d42b      	bmi.n	8001fc8 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f70:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f78:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001f80:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001f82:	0912      	lsrs	r2, r2, #4
 8001f84:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001f88:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001f8a:	0852      	lsrs	r2, r2, #1
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001f92:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001f94:	0852      	lsrs	r2, r2, #1
 8001f96:	3a01      	subs	r2, #1
 8001f98:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001f9c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa6:	68e3      	ldr	r3, [r4, #12]
 8001fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fac:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001fae:	f7ff fbcd 	bl	800174c <HAL_GetTick>
 8001fb2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	0198      	lsls	r0, r3, #6
 8001fb8:	f53f ae51 	bmi.w	8001c5e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff fbc6 	bl	800174c <HAL_GetTick>
 8001fc0:	1b40      	subs	r0, r0, r5
 8001fc2:	2802      	cmp	r0, #2
 8001fc4:	d9f6      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x400>
 8001fc6:	e684      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fbc0 	bl	800174c <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9cb      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3b6>
 8001fd2:	e67e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	0119      	lsls	r1, r3, #4
 8001fd8:	d406      	bmi.n	8001fe8 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001fda:	6823      	ldr	r3, [r4, #0]
           &&
 8001fdc:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fde:	bf5e      	ittt	pl
 8001fe0:	68e3      	ldrpl	r3, [r4, #12]
 8001fe2:	f023 0303 	bicpl.w	r3, r3, #3
 8001fe6:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fe8:	68e3      	ldr	r3, [r4, #12]
 8001fea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fbaa 	bl	800174c <HAL_GetTick>
 8001ff8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	f57f ae2e 	bpl.w	8001c5e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff fba3 	bl	800174c <HAL_GetTick>
 8002006:	1b40      	subs	r0, r0, r5
 8002008:	2802      	cmp	r0, #2
 800200a:	d9f6      	bls.n	8001ffa <HAL_RCC_OscConfig+0x446>
 800200c:	e661      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000

08002018 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002018:	4a56      	ldr	r2, [pc, #344]	; (8002174 <HAL_RCC_ClockConfig+0x15c>)
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	428b      	cmp	r3, r1
{
 8002022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002026:	4605      	mov	r5, r0
 8002028:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800202a:	d32b      	bcc.n	8002084 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	07d9      	lsls	r1, r3, #31
 8002030:	d435      	bmi.n	800209e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002032:	6829      	ldr	r1, [r5, #0]
 8002034:	078a      	lsls	r2, r1, #30
 8002036:	f100 8083 	bmi.w	8002140 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800203a:	4a4e      	ldr	r2, [pc, #312]	; (8002174 <HAL_RCC_ClockConfig+0x15c>)
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	429e      	cmp	r6, r3
 8002044:	f0c0 8084 	bcc.w	8002150 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	f011 0f04 	tst.w	r1, #4
 800204c:	4c4a      	ldr	r4, [pc, #296]	; (8002178 <HAL_RCC_ClockConfig+0x160>)
 800204e:	f040 808a 	bne.w	8002166 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	070b      	lsls	r3, r1, #28
 8002054:	d506      	bpl.n	8002064 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	692a      	ldr	r2, [r5, #16]
 800205a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800205e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002062:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002064:	f7ff fd3e 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8002068:	68a3      	ldr	r3, [r4, #8]
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_RCC_ClockConfig+0x164>)
 800206c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	40d8      	lsrs	r0, r3
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_RCC_ClockConfig+0x168>)
 8002076:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002078:	200f      	movs	r0, #15
 800207a:	f7ff fb3f 	bl	80016fc <HAL_InitTick>
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
}
 8002080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	430b      	orrs	r3, r1
 800208c:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4299      	cmp	r1, r3
 8002096:	d0c9      	beq.n	800202c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002098:	2001      	movs	r0, #1
 800209a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	686a      	ldr	r2, [r5, #4]
 80020a0:	4c35      	ldr	r4, [pc, #212]	; (8002178 <HAL_RCC_ClockConfig+0x160>)
 80020a2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80020a4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	d11c      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80020a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80020ac:	d0f4      	beq.n	8002098 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	68a3      	ldr	r3, [r4, #8]
 80020b0:	f023 0303 	bic.w	r3, r3, #3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80020b8:	f7ff fb48 	bl	800174c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020bc:	686b      	ldr	r3, [r5, #4]
 80020be:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80020c0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c6:	d118      	bne.n	80020fa <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c8:	68a3      	ldr	r3, [r4, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d0af      	beq.n	8002032 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7ff fb3b 	bl	800174c <HAL_GetTick>
 80020d6:	1bc0      	subs	r0, r0, r7
 80020d8:	4540      	cmp	r0, r8
 80020da:	d9f5      	bls.n	80020c8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80020dc:	2003      	movs	r0, #3
 80020de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	2a02      	cmp	r2, #2
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80020e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020ea:	e7df      	b.n	80020ac <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ec:	b912      	cbnz	r2, 80020f4 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80020ee:	f013 0f02 	tst.w	r3, #2
 80020f2:	e7db      	b.n	80020ac <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80020f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80020f8:	e7d8      	b.n	80020ac <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d10a      	bne.n	8002114 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80020fe:	68a3      	ldr	r3, [r4, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d094      	beq.n	8002032 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff fb20 	bl	800174c <HAL_GetTick>
 800210c:	1bc0      	subs	r0, r0, r7
 800210e:	4540      	cmp	r0, r8
 8002110:	d9f5      	bls.n	80020fe <HAL_RCC_ClockConfig+0xe6>
 8002112:	e7e3      	b.n	80020dc <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002114:	b973      	cbnz	r3, 8002134 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002116:	68a3      	ldr	r3, [r4, #8]
 8002118:	f013 0f0c 	tst.w	r3, #12
 800211c:	d089      	beq.n	8002032 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211e:	f7ff fb15 	bl	800174c <HAL_GetTick>
 8002122:	1bc0      	subs	r0, r0, r7
 8002124:	4540      	cmp	r0, r8
 8002126:	d9f6      	bls.n	8002116 <HAL_RCC_ClockConfig+0xfe>
 8002128:	e7d8      	b.n	80020dc <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7ff fb0f 	bl	800174c <HAL_GetTick>
 800212e:	1bc0      	subs	r0, r0, r7
 8002130:	4540      	cmp	r0, r8
 8002132:	d8d3      	bhi.n	80020dc <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002134:	68a3      	ldr	r3, [r4, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d1f5      	bne.n	800212a <HAL_RCC_ClockConfig+0x112>
 800213e:	e778      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_RCC_ClockConfig+0x160>)
 8002142:	68a8      	ldr	r0, [r5, #8]
 8002144:	6893      	ldr	r3, [r2, #8]
 8002146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800214a:	4303      	orrs	r3, r0
 800214c:	6093      	str	r3, [r2, #8]
 800214e:	e774      	b.n	800203a <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	f023 0307 	bic.w	r3, r3, #7
 8002156:	4333      	orrs	r3, r6
 8002158:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	429e      	cmp	r6, r3
 8002162:	d199      	bne.n	8002098 <HAL_RCC_ClockConfig+0x80>
 8002164:	e770      	b.n	8002048 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002166:	68a3      	ldr	r3, [r4, #8]
 8002168:	68ea      	ldr	r2, [r5, #12]
 800216a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800216e:	4313      	orrs	r3, r2
 8002170:	60a3      	str	r3, [r4, #8]
 8002172:	e76e      	b.n	8002052 <HAL_RCC_ClockConfig+0x3a>
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	08003370 	.word	0x08003370
 8002180:	20000014 	.word	0x20000014

08002184 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800218c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800218e:	6842      	ldr	r2, [r0, #4]
 8002190:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002194:	d10a      	bne.n	80021ac <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002196:	6882      	ldr	r2, [r0, #8]
 8002198:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800219c:	d002      	beq.n	80021a4 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800219e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80021a2:	d103      	bne.n	80021ac <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80021ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021b2:	d107      	bne.n	80021c4 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021ca:	2300      	movs	r3, #0
 80021cc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80021d0:	2003      	movs	r0, #3
 80021d2:	4770      	bx	lr

080021d4 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4605      	mov	r5, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	6898      	ldr	r0, [r3, #8]
 80021e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021e4:	d00d      	beq.n	8002202 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	1c62      	adds	r2, r4, #1
 80021e8:	d0f9      	beq.n	80021de <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80021ea:	b924      	cbnz	r4, 80021f6 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 80021ec:	4628      	mov	r0, r5
}
 80021ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021f2:	f7ff bfc7 	b.w	8002184 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80021f6:	f7ff faa9 	bl	800174c <HAL_GetTick>
 80021fa:	1b80      	subs	r0, r0, r6
 80021fc:	4284      	cmp	r4, r0
 80021fe:	d8ed      	bhi.n	80021dc <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002200:	e7f4      	b.n	80021ec <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8002202:	bd70      	pop	{r4, r5, r6, pc}

08002204 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002206:	4606      	mov	r6, r0
 8002208:	460c      	mov	r4, r1
 800220a:	4615      	mov	r5, r2
 800220c:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800220e:	6831      	ldr	r1, [r6, #0]
 8002210:	6888      	ldr	r0, [r1, #8]
 8002212:	4020      	ands	r0, r4
 8002214:	d00e      	beq.n	8002234 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002216:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800221a:	bf01      	itttt	eq
 800221c:	7b0a      	ldrbeq	r2, [r1, #12]
 800221e:	b2d2      	uxtbeq	r2, r2
 8002220:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8002224:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8002228:	1c6b      	adds	r3, r5, #1
 800222a:	d0f1      	beq.n	8002210 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800222c:	b925      	cbnz	r5, 8002238 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 800222e:	4630      	mov	r0, r6
 8002230:	f7ff ffa8 	bl	8002184 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002234:	b003      	add	sp, #12
 8002236:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002238:	f7ff fa88 	bl	800174c <HAL_GetTick>
 800223c:	1bc0      	subs	r0, r0, r7
 800223e:	4285      	cmp	r5, r0
 8002240:	d8e5      	bhi.n	800220e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8002242:	e7f4      	b.n	800222e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08002244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002246:	4613      	mov	r3, r2
{
 8002248:	460d      	mov	r5, r1
 800224a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800224c:	460a      	mov	r2, r1
 800224e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002252:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002254:	f7ff ffd6 	bl	8002204 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002258:	b128      	cbz	r0, 8002266 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002262:	2003      	movs	r0, #3
 8002264:	e00f      	b.n	8002286 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002266:	4632      	mov	r2, r6
 8002268:	4629      	mov	r1, r5
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff ffb2 	bl	80021d4 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002270:	2800      	cmp	r0, #0
 8002272:	d1f2      	bne.n	800225a <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002274:	4633      	mov	r3, r6
 8002276:	462a      	mov	r2, r5
 8002278:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ffc1 	bl	8002204 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002282:	2800      	cmp	r0, #0
 8002284:	d1e9      	bne.n	800225a <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002286:	bd70      	pop	{r4, r5, r6, pc}

08002288 <HAL_SPI_Init>:
{
 8002288:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800228a:	4604      	mov	r4, r0
 800228c:	2800      	cmp	r0, #0
 800228e:	d04a      	beq.n	8002326 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002294:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800229c:	b91b      	cbnz	r3, 80022a6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800229e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80022a2:	f7fe ff9b 	bl	80011dc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80022a6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80022a8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80022aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80022ae:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b0:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80022b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022c0:	d92e      	bls.n	8002320 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022c2:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022c4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c8:	bf18      	it	ne
 80022ca:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80022cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022ce:	b92b      	cbnz	r3, 80022dc <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80022d4:	bf8c      	ite	hi
 80022d6:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022d8:	2301      	movls	r3, #1
 80022da:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022dc:	68a6      	ldr	r6, [r4, #8]
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	69a5      	ldr	r5, [r4, #24]
 80022e2:	4333      	orrs	r3, r6
 80022e4:	6926      	ldr	r6, [r4, #16]
 80022e6:	4333      	orrs	r3, r6
 80022e8:	6966      	ldr	r6, [r4, #20]
 80022ea:	4333      	orrs	r3, r6
 80022ec:	69e6      	ldr	r6, [r4, #28]
 80022ee:	4333      	orrs	r3, r6
 80022f0:	6a26      	ldr	r6, [r4, #32]
 80022f2:	4333      	orrs	r3, r6
 80022f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022f6:	4333      	orrs	r3, r6
 80022f8:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80022fc:	4333      	orrs	r3, r6
 80022fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002302:	431a      	orrs	r2, r3
 8002304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002306:	0c2d      	lsrs	r5, r5, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	f005 0504 	and.w	r5, r5, #4
 800230e:	432a      	orrs	r2, r5
 8002310:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8002312:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002314:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002316:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002318:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800231a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800231e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002320:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002324:	e7d0      	b.n	80022c8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
}
 8002328:	bd70      	pop	{r4, r5, r6, pc}

0800232a <HAL_SPI_TransmitReceive>:
{
 800232a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800232e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002330:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002334:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002338:	2b01      	cmp	r3, #1
{
 800233a:	4604      	mov	r4, r0
 800233c:	460d      	mov	r5, r1
 800233e:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8002340:	f000 8112 	beq.w	8002568 <HAL_SPI_TransmitReceive+0x23e>
 8002344:	2301      	movs	r3, #1
 8002346:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800234a:	f7ff f9ff 	bl	800174c <HAL_GetTick>
  tmp  = hspi->State;
 800234e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8002352:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002354:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002356:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002358:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800235a:	d00a      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x48>
 800235c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002360:	f040 8100 	bne.w	8002564 <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002364:	68a2      	ldr	r2, [r4, #8]
 8002366:	2a00      	cmp	r2, #0
 8002368:	f040 80fc 	bne.w	8002564 <HAL_SPI_TransmitReceive+0x23a>
 800236c:	2b04      	cmp	r3, #4
 800236e:	f040 80f9 	bne.w	8002564 <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002372:	2d00      	cmp	r5, #0
 8002374:	d04b      	beq.n	800240e <HAL_SPI_TransmitReceive+0xe4>
 8002376:	2e00      	cmp	r6, #0
 8002378:	d049      	beq.n	800240e <HAL_SPI_TransmitReceive+0xe4>
 800237a:	2f00      	cmp	r7, #0
 800237c:	d047      	beq.n	800240e <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800237e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002382:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002384:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002386:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002388:	bf1c      	itt	ne
 800238a:	2305      	movne	r3, #5
 800238c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002390:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002392:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002396:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8002398:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800239a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800239e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80023a0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023a4:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023a6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023a8:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80023aa:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023ac:	d804      	bhi.n	80023b8 <HAL_SPI_TransmitReceive+0x8e>
 80023ae:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80023b2:	b292      	uxth	r2, r2
 80023b4:	2a01      	cmp	r2, #1
 80023b6:	d92c      	bls.n	8002412 <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023be:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80023c4:	bf5e      	ittt	pl
 80023c6:	681a      	ldrpl	r2, [r3, #0]
 80023c8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80023cc:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ce:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80023d2:	d956      	bls.n	8002482 <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023d4:	b119      	cbz	r1, 80023de <HAL_SPI_TransmitReceive+0xb4>
 80023d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023d8:	b292      	uxth	r2, r2
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d106      	bne.n	80023ec <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80023de:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80023e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80023ec:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b993      	cbnz	r3, 800241a <HAL_SPI_TransmitReceive+0xf0>
 80023f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b973      	cbnz	r3, 800241a <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023fc:	464a      	mov	r2, r9
 80023fe:	4641      	mov	r1, r8
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff ff1f 	bl	8002244 <SPI_EndRxTxTransaction>
 8002406:	2800      	cmp	r0, #0
 8002408:	d033      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800240a:	2320      	movs	r3, #32
 800240c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800240e:	2001      	movs	r0, #1
 8002410:	e02f      	b.n	8002472 <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002418:	e7d1      	b.n	80023be <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800241a:	b177      	cbz	r7, 800243a <HAL_SPI_TransmitReceive+0x110>
 800241c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800241e:	b29b      	uxth	r3, r3
 8002420:	b15b      	cbz	r3, 800243a <HAL_SPI_TransmitReceive+0x110>
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	0792      	lsls	r2, r2, #30
 8002428:	d507      	bpl.n	800243a <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800242a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800242e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002430:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002432:	3b01      	subs	r3, #1
 8002434:	b29b      	uxth	r3, r3
 8002436:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002438:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800243a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800243e:	b29b      	uxth	r3, r3
 8002440:	b16b      	cbz	r3, 800245e <HAL_SPI_TransmitReceive+0x134>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	07d0      	lsls	r0, r2, #31
 8002448:	d509      	bpl.n	800245e <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002450:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002454:	3b01      	subs	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800245c:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800245e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002462:	d0c4      	beq.n	80023ee <HAL_SPI_TransmitReceive+0xc4>
 8002464:	f7ff f972 	bl	800174c <HAL_GetTick>
 8002468:	eba0 0009 	sub.w	r0, r0, r9
 800246c:	4580      	cmp	r8, r0
 800246e:	d8be      	bhi.n	80023ee <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 8002470:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002472:	2301      	movs	r3, #1
 8002474:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002478:	2300      	movs	r3, #0
 800247a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800247e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002482:	b119      	cbz	r1, 800248c <HAL_SPI_TransmitReceive+0x162>
 8002484:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002486:	b292      	uxth	r2, r2
 8002488:	2a01      	cmp	r2, #1
 800248a:	d10a      	bne.n	80024a2 <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 800248c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800248e:	b292      	uxth	r2, r2
 8002490:	2a01      	cmp	r2, #1
 8002492:	d94d      	bls.n	8002530 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002494:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002498:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800249a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800249c:	3b02      	subs	r3, #2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024a2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b923      	cbnz	r3, 80024b4 <HAL_SPI_TransmitReceive+0x18a>
 80024aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0a3      	beq.n	80023fc <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80024b4:	b197      	cbz	r7, 80024dc <HAL_SPI_TransmitReceive+0x1b2>
 80024b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b17b      	cbz	r3, 80024dc <HAL_SPI_TransmitReceive+0x1b2>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	0791      	lsls	r1, r2, #30
 80024c2:	d50b      	bpl.n	80024dc <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 80024c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024c6:	b292      	uxth	r2, r2
 80024c8:	2a01      	cmp	r2, #1
 80024ca:	d939      	bls.n	8002540 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80024cc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024d0:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80024d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d4:	3b02      	subs	r3, #2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80024da:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80024dc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b1db      	cbz	r3, 800251c <HAL_SPI_TransmitReceive+0x1f2>
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	07d2      	lsls	r2, r2, #31
 80024ea:	d517      	bpl.n	800251c <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 80024ec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80024f0:	b292      	uxth	r2, r2
 80024f2:	2a01      	cmp	r2, #1
 80024f4:	d92c      	bls.n	8002550 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 80024fc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002500:	3a02      	subs	r2, #2
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002508:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800250c:	b292      	uxth	r2, r2
 800250e:	2a01      	cmp	r2, #1
 8002510:	d803      	bhi.n	800251a <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002518:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800251a:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800251c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002520:	d0c0      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x17a>
 8002522:	f7ff f913 	bl	800174c <HAL_GetTick>
 8002526:	eba0 0009 	sub.w	r0, r0, r9
 800252a:	4580      	cmp	r8, r0
 800252c:	d8ba      	bhi.n	80024a4 <HAL_SPI_TransmitReceive+0x17a>
 800252e:	e79f      	b.n	8002470 <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002530:	782a      	ldrb	r2, [r5, #0]
 8002532:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002534:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002536:	3b01      	subs	r3, #1
 8002538:	b29b      	uxth	r3, r3
 800253a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800253c:	3501      	adds	r5, #1
 800253e:	e7b0      	b.n	80024a2 <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002540:	782a      	ldrb	r2, [r5, #0]
 8002542:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002544:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002546:	3b01      	subs	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800254c:	3501      	adds	r5, #1
 800254e:	e7c4      	b.n	80024da <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002550:	7b1b      	ldrb	r3, [r3, #12]
 8002552:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8002554:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002558:	3b01      	subs	r3, #1
 800255a:	b29b      	uxth	r3, r3
 800255c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002560:	3601      	adds	r6, #1
 8002562:	e7da      	b.n	800251a <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 8002564:	2002      	movs	r0, #2
 8002566:	e784      	b.n	8002472 <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 8002568:	2002      	movs	r0, #2
}
 800256a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800256e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800256e:	b530      	push	{r4, r5, lr}
 8002570:	b08b      	sub	sp, #44	; 0x2c
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002572:	ac02      	add	r4, sp, #8
  cp.role = role;
 8002574:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 8002578:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 800257c:	f88d 2006 	strb.w	r2, [sp, #6]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002580:	2100      	movs	r1, #0
 8002582:	2207      	movs	r2, #7
 8002584:	4620      	mov	r0, r4
{
 8002586:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002588:	f000 fdbd 	bl	8003106 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800258c:	2218      	movs	r2, #24
 800258e:	2100      	movs	r1, #0
 8002590:	a804      	add	r0, sp, #16
 8002592:	f000 fdb8 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002596:	233f      	movs	r3, #63	; 0x3f
 8002598:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800259c:	238a      	movs	r3, #138	; 0x8a
 800259e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80025a2:	ab01      	add	r3, sp, #4
 80025a4:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80025a6:	2303      	movs	r3, #3
 80025a8:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80025aa:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 80025ac:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 80025ae:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 80025b0:	9408      	str	r4, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80025b2:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80025b4:	f000 fbf0 	bl	8002d98 <hci_send_req>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	db15      	blt.n	80025e8 <aci_gap_init_IDB05A1+0x7a>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80025bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80025c0:	b980      	cbnz	r0, 80025e4 <aci_gap_init_IDB05A1+0x76>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80025c2:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80025c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 80025c8:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80025cc:	802a      	strh	r2, [r5, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80025ce:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80025d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025d8:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80025da:	9b03      	ldr	r3, [sp, #12]
 80025dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80025de:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80025e2:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 80025e4:	b00b      	add	sp, #44	; 0x2c
 80025e6:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 80025e8:	20ff      	movs	r0, #255	; 0xff
 80025ea:	e7fb      	b.n	80025e4 <aci_gap_init_IDB05A1+0x76>

080025ec <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ee:	b08b      	sub	sp, #44	; 0x2c
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80025f0:	ac02      	add	r4, sp, #8
  cp.role = role;
 80025f2:	f88d 0004 	strb.w	r0, [sp, #4]
{
 80025f6:	460f      	mov	r7, r1
 80025f8:	4616      	mov	r6, r2
  Osal_MemSet(&resp, 0, sizeof(resp));
 80025fa:	2100      	movs	r1, #0
 80025fc:	2207      	movs	r2, #7
 80025fe:	4620      	mov	r0, r4
{
 8002600:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002602:	f000 fd80 	bl	8003106 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002606:	2218      	movs	r2, #24
 8002608:	2100      	movs	r1, #0
 800260a:	a804      	add	r0, sp, #16
 800260c:	f000 fd7b 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002610:	233f      	movs	r3, #63	; 0x3f
 8002612:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8002616:	238a      	movs	r3, #138	; 0x8a
 8002618:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800261c:	ab01      	add	r3, sp, #4
 800261e:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8002620:	2301      	movs	r3, #1
 8002622:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002624:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 8002626:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8002628:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800262a:	9408      	str	r4, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800262c:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800262e:	f000 fbb3 	bl	8002d98 <hci_send_req>
 8002632:	2800      	cmp	r0, #0
 8002634:	db13      	blt.n	800265e <aci_gap_init_IDB04A1+0x72>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8002636:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800263a:	b970      	cbnz	r0, 800265a <aci_gap_init_IDB04A1+0x6e>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800263c:	9a02      	ldr	r2, [sp, #8]
 800263e:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002642:	803a      	strh	r2, [r7, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002644:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002648:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800264c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002650:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8002652:	9a03      	ldr	r2, [sp, #12]
 8002654:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002658:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 800265a:	b00b      	add	sp, #44	; 0x2c
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800265e:	20ff      	movs	r0, #255	; 0xff
 8002660:	e7fb      	b.n	800265a <aci_gap_init_IDB04A1+0x6e>

08002662 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8002662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002664:	b095      	sub	sp, #84	; 0x54
 8002666:	461f      	mov	r7, r3
 8002668:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 800266c:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8002670:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8002674:	192b      	adds	r3, r5, r4
 8002676:	2b1a      	cmp	r3, #26
{
 8002678:	f8ad 2004 	strh.w	r2, [sp, #4]
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800267c:	dc56      	bgt.n	800272c <aci_gap_set_discoverable+0xca>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800267e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 8002682:	2202      	movs	r2, #2
 8002684:	f10d 0106 	add.w	r1, sp, #6
 8002688:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800268c:	f000 fd2b 	bl	80030e6 <Osal_MemCpy>
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 8002690:	2202      	movs	r2, #2
 8002692:	a901      	add	r1, sp, #4
 8002694:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 8002698:	f000 fd25 	bl	80030e6 <Osal_MemCpy>
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 800269c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 80026a0:	991c      	ldr	r1, [sp, #112]	; 0x70
  buffer[indx] = AdvFilterPolicy;
 80026a2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 80026a6:	462a      	mov	r2, r5
 80026a8:	a80c      	add	r0, sp, #48	; 0x30
  buffer[indx] = LocalNameLen;
 80026aa:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  buffer[indx] = OwnAddrType;
 80026ae:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 80026b2:	f000 fd18 	bl	80030e6 <Osal_MemCpy>
  indx +=  LocalNameLen;
 80026b6:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 80026ba:	aa14      	add	r2, sp, #80	; 0x50
 80026bc:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 80026c0:	3509      	adds	r5, #9
 80026c2:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 80026c4:	f803 4c28 	strb.w	r4, [r3, #-40]
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 80026c8:	ae0a      	add	r6, sp, #40	; 0x28

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80026ca:	4622      	mov	r2, r4
  indx +=  ServiceUUIDLen;  
 80026cc:	442c      	add	r4, r5
 80026ce:	b2e4      	uxtb	r4, r4
  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80026d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80026d2:	1970      	adds	r0, r6, r5
 80026d4:	f000 fd07 	bl	80030e6 <Osal_MemCpy>

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 80026d8:	2202      	movs	r2, #2
 80026da:	a91f      	add	r1, sp, #124	; 0x7c
 80026dc:	1930      	adds	r0, r6, r4
 80026de:	f000 fd02 	bl	80030e6 <Osal_MemCpy>
  indx +=  2;
 80026e2:	1ca0      	adds	r0, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 80026e4:	2202      	movs	r2, #2
 80026e6:	a920      	add	r1, sp, #128	; 0x80
 80026e8:	fa56 f080 	uxtab	r0, r6, r0
 80026ec:	f000 fcfb 	bl	80030e6 <Osal_MemCpy>
  indx +=  2;    

  Osal_MemSet(&rq, 0, sizeof(rq));
 80026f0:	2218      	movs	r2, #24
 80026f2:	2100      	movs	r1, #0
 80026f4:	a804      	add	r0, sp, #16
 80026f6:	f000 fd06 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80026fa:	233f      	movs	r3, #63	; 0x3f
 80026fc:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8002700:	2383      	movs	r3, #131	; 0x83
 8002702:	f8ad 3012 	strh.w	r3, [sp, #18]
  indx +=  2;    
 8002706:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8002708:	f10d 030f 	add.w	r3, sp, #15
 800270c:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 800270e:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002710:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002712:	2100      	movs	r1, #0
 8002714:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 8002716:	9606      	str	r6, [sp, #24]
  rq.clen = indx;
 8002718:	9407      	str	r4, [sp, #28]
  rq.rlen = 1;
 800271a:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800271c:	f000 fb3c 	bl	8002d98 <hci_send_req>
 8002720:	2800      	cmp	r0, #0
 8002722:	db05      	blt.n	8002730 <aci_gap_set_discoverable+0xce>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8002724:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 8002728:	b015      	add	sp, #84	; 0x54
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800272c:	2042      	movs	r0, #66	; 0x42
 800272e:	e7fb      	b.n	8002728 <aci_gap_set_discoverable+0xc6>
    return BLE_STATUS_TIMEOUT;
 8002730:	20ff      	movs	r0, #255	; 0xff
 8002732:	e7f9      	b.n	8002728 <aci_gap_set_discoverable+0xc6>

08002734 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8002734:	b530      	push	{r4, r5, lr}
 8002736:	b08f      	sub	sp, #60	; 0x3c
 8002738:	4615      	mov	r5, r2
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800273a:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 800273e:	f88d 101d 	strb.w	r1, [sp, #29]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8002742:	2210      	movs	r2, #16
 8002744:	4629      	mov	r1, r5
 8002746:	f10d 001e 	add.w	r0, sp, #30
{
 800274a:	461c      	mov	r4, r3
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 800274c:	f000 fccb 	bl	80030e6 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
 8002750:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002754:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8002758:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800275c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8002760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002762:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8002766:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 8002768:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800276c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002770:	2100      	movs	r1, #0
 8002772:	a801      	add	r0, sp, #4
  cp.min_encryption_key_size = min_encryption_key_size;
 8002774:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002778:	f000 fcc5 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800277c:	233f      	movs	r3, #63	; 0x3f
 800277e:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8002782:	2386      	movs	r3, #134	; 0x86
 8002784:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8002788:	ab07      	add	r3, sp, #28
 800278a:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 800278c:	231a      	movs	r3, #26
 800278e:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8002790:	f10d 0303 	add.w	r3, sp, #3
 8002794:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8002796:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002798:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800279a:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800279c:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800279e:	f000 fafb 	bl	8002d98 <hci_send_req>
 80027a2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80027a4:	bfac      	ite	ge
 80027a6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80027aa:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 80027ac:	b00f      	add	sp, #60	; 0x3c
 80027ae:	bd30      	pop	{r4, r5, pc}

080027b0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80027b0:	b500      	push	{lr}
 80027b2:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 80027b4:	2218      	movs	r2, #24
 80027b6:	2100      	movs	r1, #0
 80027b8:	a802      	add	r0, sp, #8
 80027ba:	f000 fca4 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80027be:	233f      	movs	r3, #63	; 0x3f
 80027c0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80027c4:	f240 1301 	movw	r3, #257	; 0x101
 80027c8:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80027cc:	f10d 0307 	add.w	r3, sp, #7
 80027d0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80027d2:	2100      	movs	r1, #0
  rq.rlen = 1;
 80027d4:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80027d6:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80027d8:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80027da:	f000 fadd 	bl	8002d98 <hci_send_req>
 80027de:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80027e0:	bfac      	ite	ge
 80027e2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80027e6:	20ff      	movlt	r0, #255	; 0xff
}
 80027e8:	b009      	add	sp, #36	; 0x24
 80027ea:	f85d fb04 	ldr.w	pc, [sp], #4

080027ee <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80027ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f0:	b08d      	sub	sp, #52	; 0x34
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 80027f2:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 80027f4:	ad0c      	add	r5, sp, #48	; 0x30
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80027f6:	bf0c      	ite	eq
 80027f8:	2402      	moveq	r4, #2
 80027fa:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 80027fc:	f805 0d2c 	strb.w	r0, [r5, #-44]!
{
 8002800:	4617      	mov	r7, r2
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8002802:	f10d 0005 	add.w	r0, sp, #5
 8002806:	4622      	mov	r2, r4
{
 8002808:	461e      	mov	r6, r3
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800280a:	f000 fc6c 	bl	80030e6 <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800280e:	ab0c      	add	r3, sp, #48	; 0x30
 8002810:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002812:	2100      	movs	r1, #0
  buffer[indx] = service_type;
 8002814:	f803 7c2b 	strb.w	r7, [r3, #-43]
  buffer[indx] = max_attr_records;
 8002818:	ab0c      	add	r3, sp, #48	; 0x30
 800281a:	191a      	adds	r2, r3, r4
  Osal_MemSet(&resp, 0, sizeof(resp));
 800281c:	4668      	mov	r0, sp
  buffer[indx] = max_attr_records;
 800281e:	f802 6c2a 	strb.w	r6, [r2, #-42]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002822:	2203      	movs	r2, #3
 8002824:	f000 fc6f 	bl	8003106 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8002828:	2218      	movs	r2, #24
 800282a:	2100      	movs	r1, #0
 800282c:	eb0d 0002 	add.w	r0, sp, r2
 8002830:	f000 fc69 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002834:	233f      	movs	r3, #63	; 0x3f
 8002836:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800283a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800283e:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8002842:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8002844:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8002846:	2100      	movs	r1, #0
 8002848:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 800284a:	9508      	str	r5, [sp, #32]
  rq.clen = indx;
 800284c:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800284e:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8002852:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8002854:	f000 faa0 	bl	8002d98 <hci_send_req>
 8002858:	2800      	cmp	r0, #0
 800285a:	db09      	blt.n	8002870 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800285c:	f89d 0000 	ldrb.w	r0, [sp]
 8002860:	b920      	cbnz	r0, 800286c <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8002862:	9b00      	ldr	r3, [sp, #0]
 8002864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002866:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800286a:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800286c:	b00d      	add	sp, #52	; 0x34
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8002870:	20ff      	movs	r0, #255	; 0xff
 8002872:	e7fb      	b.n	800286c <aci_gatt_add_serv+0x7e>

08002874 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	b091      	sub	sp, #68	; 0x44
 8002878:	460c      	mov	r4, r1
 800287a:	a910      	add	r1, sp, #64	; 0x40
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800287c:	ae09      	add	r6, sp, #36	; 0x24
{
 800287e:	f821 0d3a 	strh.w	r0, [r1, #-58]!
 8002882:	4617      	mov	r7, r2
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8002884:	4630      	mov	r0, r6
 8002886:	2202      	movs	r2, #2
{
 8002888:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800288a:	f000 fc2c 	bl	80030e6 <Osal_MemCpy>
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800288e:	2c01      	cmp	r4, #1
  buffer[indx] = charUuidType;
 8002890:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    uuid_len = 16;
 8002894:	bf0c      	ite	eq
 8002896:	2402      	moveq	r4, #2
 8002898:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 800289a:	4622      	mov	r2, r4
 800289c:	4639      	mov	r1, r7
 800289e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 80028a2:	f000 fc20 	bl	80030e6 <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 80028a6:	ab10      	add	r3, sp, #64	; 0x40
 80028a8:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 80028aa:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 80028ac:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 80028b0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80028b4:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 80028b8:	ab10      	add	r3, sp, #64	; 0x40
 80028ba:	4423      	add	r3, r4
 80028bc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80028c0:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80028c4:	ab10      	add	r3, sp, #64	; 0x40
 80028c6:	4423      	add	r3, r4
 80028c8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80028cc:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 80028d0:	ab10      	add	r3, sp, #64	; 0x40
 80028d2:	4423      	add	r3, r4
 80028d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80028d8:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 80028dc:	ab10      	add	r3, sp, #64	; 0x40
 80028de:	4423      	add	r3, r4
 80028e0:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 80028e4:	f803 2c14 	strb.w	r2, [r3, #-20]
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80028e8:	ad02      	add	r5, sp, #8
 80028ea:	2203      	movs	r2, #3
 80028ec:	2100      	movs	r1, #0
 80028ee:	4628      	mov	r0, r5
 80028f0:	f000 fc09 	bl	8003106 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 80028f4:	2218      	movs	r2, #24
 80028f6:	2100      	movs	r1, #0
 80028f8:	a803      	add	r0, sp, #12
 80028fa:	f000 fc04 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80028fe:	233f      	movs	r3, #63	; 0x3f
 8002900:	f8ad 300c 	strh.w	r3, [sp, #12]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8002904:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002908:	f8ad 300e 	strh.w	r3, [sp, #14]
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800290c:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800290e:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8002910:	2100      	movs	r1, #0
 8002912:	a803      	add	r0, sp, #12
  rq.cparam = (void *)buffer;
 8002914:	9605      	str	r6, [sp, #20]
  rq.clen = indx;
 8002916:	9406      	str	r4, [sp, #24]
  rq.rparam = &resp;
 8002918:	9507      	str	r5, [sp, #28]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800291a:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800291c:	f000 fa3c 	bl	8002d98 <hci_send_req>
 8002920:	2800      	cmp	r0, #0
 8002922:	db09      	blt.n	8002938 <aci_gatt_add_char+0xc4>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8002924:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002928:	b920      	cbnz	r0, 8002934 <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800292a:	9b02      	ldr	r3, [sp, #8]
 800292c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800292e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002932:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8002934:	b011      	add	sp, #68	; 0x44
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8002938:	20ff      	movs	r0, #255	; 0xff
 800293a:	e7fb      	b.n	8002934 <aci_gatt_add_char+0xc0>

0800293c <aci_gatt_add_char_desc>:
                                  uint8_t accPermissions,
                                  uint8_t gattEvtMask,
                                  uint8_t encryKeySize,
                                  uint8_t isVariable,
                                  uint16_t* descHandle)                     
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b0ab      	sub	sp, #172	; 0xac
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8002940:	ad0a      	add	r5, sp, #40	; 0x28
{
 8002942:	4614      	mov	r4, r2
 8002944:	f8ad 0006 	strh.w	r0, [sp, #6]
 8002948:	f8ad 1004 	strh.w	r1, [sp, #4]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800294c:	2202      	movs	r2, #2
 800294e:	f10d 0106 	add.w	r1, sp, #6
 8002952:	4628      	mov	r0, r5
{
 8002954:	461f      	mov	r7, r3
 8002956:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800295a:	f000 fbc4 	bl	80030e6 <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 800295e:	2202      	movs	r2, #2
 8002960:	a901      	add	r1, sp, #4
 8002962:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8002966:	f000 fbbe 	bl	80030e6 <Osal_MemCpy>
    
  if(descUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800296a:	2c01      	cmp	r4, #1
  buffer[indx] = descUuidType;
 800296c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    uuid_len = 16;
 8002970:	bf0c      	ite	eq
 8002972:	2402      	moveq	r4, #2
 8002974:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, uuid, uuid_len);
 8002976:	4622      	mov	r2, r4
 8002978:	4639      	mov	r1, r7
 800297a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 800297e:	f000 fbb2 	bl	80030e6 <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = descValueMaxLen;
 8002982:	ab2a      	add	r3, sp, #168	; 0xa8
 8002984:	4423      	add	r3, r4
 8002986:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800298a:	f803 2c7b 	strb.w	r2, [r3, #-123]
  indx++;
    
  buffer[indx] = descValueLen;
  indx++;
 800298e:	1de0      	adds	r0, r4, #7
  buffer[indx] = descValueLen;
 8002990:	ab2a      	add	r3, sp, #168	; 0xa8
 8002992:	4423      	add	r3, r4

  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 8002994:	1834      	adds	r4, r6, r0
 8002996:	2c7b      	cmp	r4, #123	; 0x7b
  buffer[indx] = descValueLen;
 8002998:	f803 6c7a 	strb.w	r6, [r3, #-122]
  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 800299c:	dc54      	bgt.n	8002a48 <aci_gatt_add_char_desc+0x10c>
    return BLE_STATUS_INVALID_PARAMS;
  
  Osal_MemCpy(buffer + indx, descValue, descValueLen);
 800299e:	4632      	mov	r2, r6
 80029a0:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80029a2:	4428      	add	r0, r5
 80029a4:	f000 fb9f 	bl	80030e6 <Osal_MemCpy>
  indx += descValueLen;
 80029a8:	b2e4      	uxtb	r4, r4
    
  buffer[indx] = secPermissions;
 80029aa:	ab2a      	add	r3, sp, #168	; 0xa8
 80029ac:	4423      	add	r3, r4
 80029ae:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 80029b2:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 80029b6:	1c63      	adds	r3, r4, #1
    
  buffer[indx] = accPermissions;
 80029b8:	aa2a      	add	r2, sp, #168	; 0xa8
 80029ba:	fa52 f383 	uxtab	r3, r2, r3
 80029be:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
 80029c2:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 80029c6:	1ca3      	adds	r3, r4, #2
    
  buffer[indx] = gattEvtMask;
 80029c8:	aa2a      	add	r2, sp, #168	; 0xa8
 80029ca:	fa52 f383 	uxtab	r3, r2, r3
 80029ce:	f89d 20d4 	ldrb.w	r2, [sp, #212]	; 0xd4
 80029d2:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 80029d6:	1ce3      	adds	r3, r4, #3
    
  buffer[indx] = encryKeySize;
 80029d8:	aa2a      	add	r2, sp, #168	; 0xa8
 80029da:	fa52 f383 	uxtab	r3, r2, r3
 80029de:	f89d 20d8 	ldrb.w	r2, [sp, #216]	; 0xd8
 80029e2:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 80029e6:	1d23      	adds	r3, r4, #4
    
  buffer[indx] = isVariable;
 80029e8:	aa2a      	add	r2, sp, #168	; 0xa8
 80029ea:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80029ee:	ae03      	add	r6, sp, #12
  buffer[indx] = isVariable;
 80029f0:	f89d 20dc 	ldrb.w	r2, [sp, #220]	; 0xdc
 80029f4:	f803 2c80 	strb.w	r2, [r3, #-128]
  Osal_MemSet(&resp, 0, sizeof(resp));
 80029f8:	2100      	movs	r1, #0
 80029fa:	2203      	movs	r2, #3
 80029fc:	4630      	mov	r0, r6
 80029fe:	f000 fb82 	bl	8003106 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8002a02:	2218      	movs	r2, #24
 8002a04:	2100      	movs	r1, #0
 8002a06:	a804      	add	r0, sp, #16
 8002a08:	f000 fb7d 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002a0c:	233f      	movs	r3, #63	; 0x3f
 8002a0e:	f8ad 3010 	strh.w	r3, [sp, #16]
  indx++;
 8002a12:	3405      	adds	r4, #5
  rq.ocf = OCF_GATT_ADD_CHAR_DESC;
 8002a14:	f240 1305 	movw	r3, #261	; 0x105
 8002a18:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8002a1c:	b2e4      	uxtb	r4, r4
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 8002a1e:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8002a20:	2100      	movs	r1, #0
 8002a22:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 8002a24:	9506      	str	r5, [sp, #24]
  rq.clen = indx;
 8002a26:	9407      	str	r4, [sp, #28]
  rq.rparam = &resp;
 8002a28:	9608      	str	r6, [sp, #32]
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 8002a2a:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002a2c:	f000 f9b4 	bl	8002d98 <hci_send_req>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	db0b      	blt.n	8002a4c <aci_gatt_add_char_desc+0x110>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8002a34:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a38:	b920      	cbnz	r0, 8002a44 <aci_gatt_add_char_desc+0x108>
    return resp.status;
  }
    
  *descHandle = btohs(resp.handle);
 8002a3a:	9b03      	ldr	r3, [sp, #12]
 8002a3c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8002a3e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002a42:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8002a44:	b02b      	add	sp, #172	; 0xac
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002a48:	2042      	movs	r0, #66	; 0x42
 8002a4a:	e7fb      	b.n	8002a44 <aci_gatt_add_char_desc+0x108>
    return BLE_STATUS_TIMEOUT;
 8002a4c:	20ff      	movs	r0, #255	; 0xff
 8002a4e:	e7f9      	b.n	8002a44 <aci_gatt_add_char_desc+0x108>

08002a50 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	b0aa      	sub	sp, #168	; 0xa8
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8002a54:	2b7a      	cmp	r3, #122	; 0x7a
{
 8002a56:	4616      	mov	r6, r2
 8002a58:	461c      	mov	r4, r3
 8002a5a:	f8ad 0006 	strh.w	r0, [sp, #6]
 8002a5e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8002a62:	dc35      	bgt.n	8002ad0 <aci_gatt_update_char_value+0x80>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 8002a64:	ad0a      	add	r5, sp, #40	; 0x28
 8002a66:	2202      	movs	r2, #2
 8002a68:	f10d 0106 	add.w	r1, sp, #6
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f000 fb3a 	bl	80030e6 <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 8002a72:	2202      	movs	r2, #2
 8002a74:	a901      	add	r1, sp, #4
 8002a76:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8002a7a:	f000 fb34 	bl	80030e6 <Osal_MemCpy>
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8002a7e:	4622      	mov	r2, r4
 8002a80:	992e      	ldr	r1, [sp, #184]	; 0xb8
  buffer[indx] = charValueLen;
 8002a82:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8002a86:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
  buffer[indx] = charValOffset;
 8002a8a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8002a8e:	f000 fb2a 	bl	80030e6 <Osal_MemCpy>
  indx +=  charValueLen;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8002a92:	2218      	movs	r2, #24
 8002a94:	2100      	movs	r1, #0
 8002a96:	a804      	add	r0, sp, #16
 8002a98:	f000 fb35 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002a9c:	233f      	movs	r3, #63	; 0x3f
 8002a9e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8002aa2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002aa6:	f8ad 3012 	strh.w	r3, [sp, #18]
  indx +=  charValueLen;
 8002aaa:	3406      	adds	r4, #6
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8002aac:	f10d 030f 	add.w	r3, sp, #15
 8002ab0:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 8002ab2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002ab4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 8002aba:	9506      	str	r5, [sp, #24]
  rq.clen = indx;
 8002abc:	9407      	str	r4, [sp, #28]
  rq.rlen = 1;
 8002abe:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002ac0:	f000 f96a 	bl	8002d98 <hci_send_req>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	db05      	blt.n	8002ad4 <aci_gatt_update_char_value+0x84>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8002ac8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 8002acc:	b02a      	add	sp, #168	; 0xa8
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002ad0:	2042      	movs	r0, #66	; 0x42
 8002ad2:	e7fb      	b.n	8002acc <aci_gatt_update_char_value+0x7c>
    return BLE_STATUS_TIMEOUT;
 8002ad4:	20ff      	movs	r0, #255	; 0xff
 8002ad6:	e7f9      	b.n	8002acc <aci_gatt_update_char_value+0x7c>

08002ad8 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8002ad8:	b500      	push	{lr}
 8002ada:	b089      	sub	sp, #36	; 0x24
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);

    Osal_MemSet(&rq, 0, sizeof(rq));
 8002adc:	2218      	movs	r2, #24
    cp.conn_handle = htobs(conn_handle);
 8002ade:	f8ad 0004 	strh.w	r0, [sp, #4]
    Osal_MemSet(&rq, 0, sizeof(rq));
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	a802      	add	r0, sp, #8
 8002ae6:	f000 fb0e 	bl	8003106 <Osal_MemSet>
    rq.ogf = OGF_VENDOR_CMD;
 8002aea:	233f      	movs	r3, #63	; 0x3f
 8002aec:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8002af0:	f240 1327 	movw	r3, #295	; 0x127
 8002af4:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 8002af8:	ab01      	add	r3, sp, #4
 8002afa:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8002afc:	2302      	movs	r3, #2
 8002afe:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 8002b00:	f10d 0303 	add.w	r3, sp, #3
 8002b04:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;

    if (hci_send_req(&rq, FALSE) < 0)
 8002b06:	2100      	movs	r1, #0
    rq.rlen = 1;
 8002b08:	2301      	movs	r3, #1
    if (hci_send_req(&rq, FALSE) < 0)
 8002b0a:	a802      	add	r0, sp, #8
    rq.rlen = 1;
 8002b0c:	9307      	str	r3, [sp, #28]
    if (hci_send_req(&rq, FALSE) < 0)
 8002b0e:	f000 f943 	bl	8002d98 <hci_send_req>
 8002b12:	2800      	cmp	r0, #0
      return BLE_STATUS_TIMEOUT;

    return status;
 8002b14:	bfac      	ite	ge
 8002b16:	f89d 0003 	ldrbge.w	r0, [sp, #3]
      return BLE_STATUS_TIMEOUT;
 8002b1a:	20ff      	movlt	r0, #255	; 0xff
}
 8002b1c:	b009      	add	sp, #36	; 0x24
 8002b1e:	f85d fb04 	ldr.w	pc, [sp], #4

08002b22 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8002b22:	b510      	push	{r4, lr}
 8002b24:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8002b26:	2c7e      	cmp	r4, #126	; 0x7e
{
 8002b28:	b0a8      	sub	sp, #160	; 0xa0
 8002b2a:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8002b2c:	dc27      	bgt.n	8002b7e <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  Osal_MemCpy(buffer + indx, val, len);
 8002b2e:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8002b30:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy(buffer + indx, val, len);
 8002b34:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8002b38:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  Osal_MemCpy(buffer + indx, val, len);
 8002b3c:	f000 fad3 	bl	80030e6 <Osal_MemCpy>
  indx +=  len;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8002b40:	2218      	movs	r2, #24
 8002b42:	2100      	movs	r1, #0
 8002b44:	a802      	add	r0, sp, #8
 8002b46:	f000 fade 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002b4a:	233f      	movs	r3, #63	; 0x3f
 8002b4c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8002b50:	230c      	movs	r3, #12
 8002b52:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8002b56:	ab08      	add	r3, sp, #32
 8002b58:	9304      	str	r3, [sp, #16]
  indx +=  len;
 8002b5a:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 8002b5c:	f10d 0307 	add.w	r3, sp, #7
 8002b60:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8002b62:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002b64:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002b66:	2100      	movs	r1, #0
 8002b68:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8002b6a:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8002b6c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002b6e:	f000 f913 	bl	8002d98 <hci_send_req>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	db05      	blt.n	8002b82 <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 8002b76:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002b7a:	b028      	add	sp, #160	; 0xa0
 8002b7c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002b7e:	2042      	movs	r0, #66	; 0x42
 8002b80:	e7fb      	b.n	8002b7a <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 8002b82:	20ff      	movs	r0, #255	; 0xff
 8002b84:	e7f9      	b.n	8002b7a <aci_hal_write_config_data+0x58>

08002b86 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8002b86:	b500      	push	{lr}
 8002b88:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8002b8a:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8002b8c:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8002b90:	f88d 1005 	strb.w	r1, [sp, #5]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002b94:	a802      	add	r0, sp, #8
 8002b96:	2100      	movs	r1, #0
 8002b98:	f000 fab5 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8002b9c:	233f      	movs	r3, #63	; 0x3f
 8002b9e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8002ba8:	ab01      	add	r3, sp, #4
 8002baa:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8002bac:	2302      	movs	r3, #2
 8002bae:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8002bb0:	f10d 0303 	add.w	r3, sp, #3
 8002bb4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8002bb6:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002bb8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002bba:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8002bbc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002bbe:	f000 f8eb 	bl	8002d98 <hci_send_req>
 8002bc2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8002bc4:	bfac      	ite	ge
 8002bc6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8002bca:	20ff      	movlt	r0, #255	; 0xff
}
 8002bcc:	b009      	add	sp, #36	; 0x24
 8002bce:	f85d fb04 	ldr.w	pc, [sp], #4

08002bd2 <getBlueNRGVersion>:
#include "osal.h"
#include "string.h"
#include "stm32_bluenrg_ble.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8002bd2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8002bd4:	f10d 030e 	add.w	r3, sp, #14
 8002bd8:	9300      	str	r3, [sp, #0]
{
 8002bda:	4606      	mov	r6, r0
 8002bdc:	460d      	mov	r5, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8002bde:	ab03      	add	r3, sp, #12
 8002be0:	f10d 0209 	add.w	r2, sp, #9
 8002be4:	f10d 010a 	add.w	r1, sp, #10
 8002be8:	a802      	add	r0, sp, #8
 8002bea:	f000 f991 	bl	8002f10 <hci_le_read_local_version>
 8002bee:	b2c4      	uxtb	r4, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8002bf0:	b96c      	cbnz	r4, 8002c0e <getBlueNRGVersion+0x3c>
    *hwVersion = hci_revision >> 8;
 8002bf2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8002bf6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8002bfa:	0a0b      	lsrs	r3, r1, #8
 8002bfc:	7033      	strb	r3, [r6, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8002bfe:	f002 030f 	and.w	r3, r2, #15
 8002c02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8002c06:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	802b      	strh	r3, [r5, #0]
  }

  HCI_Process(); // To receive the BlueNRG EVT
 8002c0e:	f000 f879 	bl	8002d04 <HCI_Process>

  return status;
}
 8002c12:	4620      	mov	r0, r4
 8002c14:	b004      	add	sp, #16
 8002c16:	bd70      	pop	{r4, r5, r6, pc}

08002c18 <move_list.constprop.1>:
  Osal_MemCpy(header+1, &hc, sizeof(hc));
  
  hci_write(header, param, sizeof(header), plen);
}

static void move_list(tListNode * dest_list, tListNode * src_list)
 8002c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  pListNode tmp_node;
  
  while(!list_is_empty(src_list)){
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 8002c1a:	4d08      	ldr	r5, [pc, #32]	; (8002c3c <move_list.constprop.1+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 8002c1c:	4604      	mov	r4, r0
  while(!list_is_empty(src_list)){
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f000 f9ed 	bl	8002ffe <list_is_empty>
 8002c24:	b108      	cbz	r0, 8002c2a <move_list.constprop.1+0x12>
  }
}
 8002c26:	b003      	add	sp, #12
 8002c28:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 8002c2a:	a901      	add	r1, sp, #4
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f000 fa25 	bl	800307c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8002c32:	9901      	ldr	r1, [sp, #4]
 8002c34:	4628      	mov	r0, r5
 8002c36:	f000 f9ec 	bl	8003012 <list_insert_head>
 8002c3a:	e7f0      	b.n	8002c1e <move_list.constprop.1+0x6>
 8002c3c:	20000420 	.word	0x20000420

08002c40 <HCI_Init>:
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
  list_init_head (&hciReadPktPool);
 8002c42:	4809      	ldr	r0, [pc, #36]	; (8002c68 <HCI_Init+0x28>)
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8002c44:	4e09      	ldr	r6, [pc, #36]	; (8002c6c <HCI_Init+0x2c>)
 8002c46:	4d08      	ldr	r5, [pc, #32]	; (8002c68 <HCI_Init+0x28>)
  list_init_head (&hciReadPktPool);
 8002c48:	f000 f9d6 	bl	8002ff8 <list_init_head>
  list_init_head (&hciReadPktRxQueue);
 8002c4c:	4808      	ldr	r0, [pc, #32]	; (8002c70 <HCI_Init+0x30>)
 8002c4e:	f000 f9d3 	bl	8002ff8 <list_init_head>
 8002c52:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8002c54:	1931      	adds	r1, r6, r4
 8002c56:	4628      	mov	r0, r5
 8002c58:	348c      	adds	r4, #140	; 0x8c
 8002c5a:	f000 f9e6 	bl	800302a <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8002c5e:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8002c62:	d1f7      	bne.n	8002c54 <HCI_Init+0x14>
}
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
 8002c66:	bf00      	nop
 8002c68:	20000418 	.word	0x20000418
 8002c6c:	200000c4 	.word	0x200000c4
 8002c70:	20000420 	.word	0x20000420

08002c74 <HCI_verify>:
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8002c74:	7a03      	ldrb	r3, [r0, #8]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d108      	bne.n	8002c8c <HCI_verify+0x18>
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8002c7a:	7a83      	ldrb	r3, [r0, #10]
 8002c7c:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
 8002c80:	3803      	subs	r0, #3
  return 0;      
 8002c82:	4283      	cmp	r3, r0
 8002c84:	bf14      	ite	ne
 8002c86:	2002      	movne	r0, #2
 8002c88:	2000      	moveq	r0, #0
 8002c8a:	4770      	bx	lr
    return 1;  /* Incorrect type. */
 8002c8c:	2001      	movs	r0, #1
}
 8002c8e:	4770      	bx	lr

08002c90 <HCI_Queue_Empty>:
  return list_is_empty(&hciReadPktRxQueue);
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <HCI_Queue_Empty+0x8>)
 8002c92:	f000 b9b4 	b.w	8002ffe <list_is_empty>
 8002c96:	bf00      	nop
 8002c98:	20000420 	.word	0x20000420

08002c9c <HCI_Isr>:
{
 8002c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8002c9e:	ad02      	add	r5, sp, #8
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f845 3d04 	str.w	r3, [r5, #-4]!
  Clear_SPI_EXTI_Flag();
 8002ca6:	f7fe fd03 	bl	80016b0 <Clear_SPI_EXTI_Flag>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 8002caa:	4c14      	ldr	r4, [pc, #80]	; (8002cfc <HCI_Isr+0x60>)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8002cac:	4e14      	ldr	r6, [pc, #80]	; (8002d00 <HCI_Isr+0x64>)
  while(BlueNRG_DataPresent()){        
 8002cae:	f7fe fc18 	bl	80014e2 <BlueNRG_DataPresent>
 8002cb2:	b308      	cbz	r0, 8002cf8 <HCI_Isr+0x5c>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f000 f9a2 	bl	8002ffe <list_is_empty>
 8002cba:	b9d8      	cbnz	r0, 8002cf4 <HCI_Isr+0x58>
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f000 f9ca 	bl	8003058 <list_remove_head>
      data_len = BlueNRG_SPI_Read_All(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8002cc4:	9801      	ldr	r0, [sp, #4]
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	3008      	adds	r0, #8
 8002cca:	f7fe fc15 	bl	80014f8 <BlueNRG_SPI_Read_All>
 8002cce:	b2c0      	uxtb	r0, r0
        hciReadPacket->data_len = data_len;
 8002cd0:	9901      	ldr	r1, [sp, #4]
      if(data_len > 0){                    
 8002cd2:	b158      	cbz	r0, 8002cec <HCI_Isr+0x50>
        hciReadPacket->data_len = data_len;
 8002cd4:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
        if(HCI_verify(hciReadPacket) == 0)
 8002cd8:	4608      	mov	r0, r1
 8002cda:	f7ff ffcb 	bl	8002c74 <HCI_verify>
 8002cde:	b928      	cbnz	r0, 8002cec <HCI_Isr+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f000 f9a2 	bl	800302a <list_insert_tail>
    Clear_SPI_EXTI_Flag();
 8002ce6:	f7fe fce3 	bl	80016b0 <Clear_SPI_EXTI_Flag>
 8002cea:	e7e0      	b.n	8002cae <HCI_Isr+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002cec:	4620      	mov	r0, r4
 8002cee:	f000 f990 	bl	8003012 <list_insert_head>
 8002cf2:	e7f8      	b.n	8002ce6 <HCI_Isr+0x4a>
      Clear_SPI_EXTI_Flag();
 8002cf4:	f7fe fcdc 	bl	80016b0 <Clear_SPI_EXTI_Flag>
}
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	20000418 	.word	0x20000418
 8002d00:	20000420 	.word	0x20000420

08002d04 <HCI_Process>:
{
 8002d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8002d06:	ac02      	add	r4, sp, #8
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f844 3d04 	str.w	r3, [r4, #-4]!
  Disable_SPI_IRQ();
 8002d0e:	f7fe fc54 	bl	80015ba <Disable_SPI_IRQ>
  uint8_t list_empty = list_is_empty(&hciReadPktRxQueue);        
 8002d12:	4810      	ldr	r0, [pc, #64]	; (8002d54 <HCI_Process+0x50>)
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8002d14:	4d0f      	ldr	r5, [pc, #60]	; (8002d54 <HCI_Process+0x50>)
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002d16:	4e10      	ldr	r6, [pc, #64]	; (8002d58 <HCI_Process+0x54>)
  uint8_t list_empty = list_is_empty(&hciReadPktRxQueue);        
 8002d18:	f000 f971 	bl	8002ffe <list_is_empty>
  while(list_empty == FALSE)
 8002d1c:	b128      	cbz	r0, 8002d2a <HCI_Process+0x26>
  HCI_Isr();
 8002d1e:	f7ff ffbd 	bl	8002c9c <HCI_Isr>
  Enable_SPI_IRQ();    
 8002d22:	f7fe fc47 	bl	80015b4 <Enable_SPI_IRQ>
}
 8002d26:	b002      	add	sp, #8
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f000 f993 	bl	8003058 <list_remove_head>
    Enable_SPI_IRQ();
 8002d32:	f7fe fc3f 	bl	80015b4 <Enable_SPI_IRQ>
    HCI_Event_CB(hciReadPacket->dataBuff);
 8002d36:	9801      	ldr	r0, [sp, #4]
 8002d38:	3008      	adds	r0, #8
 8002d3a:	f7fe fa17 	bl	800116c <HCI_Event_CB>
    Disable_SPI_IRQ();
 8002d3e:	f7fe fc3c 	bl	80015ba <Disable_SPI_IRQ>
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002d42:	4630      	mov	r0, r6
 8002d44:	9901      	ldr	r1, [sp, #4]
 8002d46:	f000 f970 	bl	800302a <list_insert_tail>
    list_empty = list_is_empty(&hciReadPktRxQueue);
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f000 f957 	bl	8002ffe <list_is_empty>
 8002d50:	e7e4      	b.n	8002d1c <HCI_Process+0x18>
 8002d52:	bf00      	nop
 8002d54:	20000420 	.word	0x20000420
 8002d58:	20000418 	.word	0x20000418

08002d5c <hci_send_cmd>:
{
 8002d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8002d5e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002d62:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
{
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8002d6a:	f8ad 1000 	strh.w	r1, [sp]
  hc.plen= plen;
 8002d6e:	f88d 2002 	strb.w	r2, [sp, #2]
  header[0] = HCI_COMMAND_PKT;
 8002d72:	2301      	movs	r3, #1
  Osal_MemCpy(header+1, &hc, sizeof(hc));
 8002d74:	4669      	mov	r1, sp
 8002d76:	2203      	movs	r2, #3
 8002d78:	f10d 0005 	add.w	r0, sp, #5
  header[0] = HCI_COMMAND_PKT;
 8002d7c:	f88d 3004 	strb.w	r3, [sp, #4]
  Osal_MemCpy(header+1, &hc, sizeof(hc));
 8002d80:	f000 f9b1 	bl	80030e6 <Osal_MemCpy>
  Hal_Write_Serial(data1, data2, n_bytes1, n_bytes2);
 8002d84:	2204      	movs	r2, #4
 8002d86:	4623      	mov	r3, r4
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb0d 0002 	add.w	r0, sp, r2
 8002d8e:	f7fe fc75 	bl	800167c <Hal_Write_Serial>
}
 8002d92:	b003      	add	sp, #12
 8002d94:	bd30      	pop	{r4, r5, pc}
	...

08002d98 <hci_send_req>:
  
  Enable_SPI_IRQ();
}

int hci_send_req(struct hci_request *r, BOOL async)
{
 8002d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	b087      	sub	sp, #28
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;
  int to = DEFAULT_TIMEOUT;
  struct timer t;
  tHciDataPacket * hciReadPacket = NULL;
 8002d9e:	2300      	movs	r3, #0
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002da0:	8845      	ldrh	r5, [r0, #2]
 8002da2:	f8b0 8000 	ldrh.w	r8, [r0]
  tHciDataPacket * hciReadPacket = NULL;
 8002da6:	9301      	str	r3, [sp, #4]
{
 8002da8:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8002daa:	a804      	add	r0, sp, #16
{
 8002dac:	460e      	mov	r6, r1
  list_init_head(&hciTempQueue);
 8002dae:	f000 f923 	bl	8002ff8 <list_init_head>
  Disable_SPI_IRQ();
 8002db2:	f7fe fc02 	bl	80015ba <Disable_SPI_IRQ>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8002db6:	4f54      	ldr	r7, [pc, #336]	; (8002f08 <hci_send_req+0x170>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8002db8:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8002f0c <hci_send_req+0x174>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f000 f96f 	bl	80030a0 <list_get_size>
 8002dc2:	2801      	cmp	r0, #1
 8002dc4:	dd47      	ble.n	8002e56 <hci_send_req+0xbe>
  Enable_SPI_IRQ();
 8002dc6:	f7fe fbf5 	bl	80015b4 <Enable_SPI_IRQ>

  free_event_list();
  
  hci_send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8002dca:	68a3      	ldr	r3, [r4, #8]
 8002dcc:	7b22      	ldrb	r2, [r4, #12]
 8002dce:	8861      	ldrh	r1, [r4, #2]
 8002dd0:	8820      	ldrh	r0, [r4, #0]
 8002dd2:	f7ff ffc3 	bl	8002d5c <hci_send_cmd>
  
  if(async){
 8002dd6:	2e00      	cmp	r6, #0
 8002dd8:	f040 8094 	bne.w	8002f04 <hci_send_req+0x16c>
  
  /* Minimum timeout is 1. */
  if(to == 0)
    to = 1;
  
  Timer_Set(&t, to);
 8002ddc:	2164      	movs	r1, #100	; 0x64
 8002dde:	a802      	add	r0, sp, #8
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002de0:	f3c5 0609 	ubfx	r6, r5, #0, #10
  Timer_Set(&t, to);
 8002de4:	f000 f96a 	bl	80030bc <Timer_Set>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002de8:	ea46 2688 	orr.w	r6, r6, r8, lsl #10
      }
    }
    
    /* Extract packet from HCI event queue. */
    Disable_SPI_IRQ();
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8002dec:	4f47      	ldr	r7, [pc, #284]	; (8002f0c <hci_send_req+0x174>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if(list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)){
 8002dee:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8002f08 <hci_send_req+0x170>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002df2:	b2b6      	uxth	r6, r6
      if(Timer_Expired(&t)){
 8002df4:	a802      	add	r0, sp, #8
 8002df6:	f000 f968 	bl	80030ca <Timer_Expired>
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d14f      	bne.n	8002ea0 <hci_send_req+0x108>
      if(!HCI_Queue_Empty()){
 8002e00:	f7ff ff46 	bl	8002c90 <HCI_Queue_Empty>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d1f5      	bne.n	8002df4 <hci_send_req+0x5c>
    Disable_SPI_IRQ();
 8002e08:	f7fe fbd7 	bl	80015ba <Disable_SPI_IRQ>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8002e0c:	a901      	add	r1, sp, #4
 8002e0e:	4638      	mov	r0, r7
 8002e10:	f000 f922 	bl	8003058 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8002e14:	9901      	ldr	r1, [sp, #4]
    if(hci_hdr->type == HCI_EVENT_PKT){
 8002e16:	7a0b      	ldrb	r3, [r1, #8]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d107      	bne.n	8002e2c <hci_send_req+0x94>
    switch (event_pckt->evt) {
 8002e1c:	7a4b      	ldrb	r3, [r1, #9]
    len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8002e1e:	f891 2088 	ldrb.w	r2, [r1, #136]	; 0x88
    switch (event_pckt->evt) {
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	d032      	beq.n	8002e8c <hci_send_req+0xf4>
 8002e26:	d821      	bhi.n	8002e6c <hci_send_req+0xd4>
 8002e28:	2b0e      	cmp	r3, #14
 8002e2a:	d05d      	beq.n	8002ee8 <hci_send_req+0x150>
    if(list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)){
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	f000 f8e6 	bl	8002ffe <list_is_empty>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d063      	beq.n	8002efe <hci_send_req+0x166>
 8002e36:	4638      	mov	r0, r7
 8002e38:	f000 f8e1 	bl	8002ffe <list_is_empty>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d05e      	beq.n	8002efe <hci_send_req+0x166>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002e40:	9901      	ldr	r1, [sp, #4]
 8002e42:	4640      	mov	r0, r8
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8002e44:	f000 f8f1 	bl	800302a <list_insert_tail>
      hciReadPacket=NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9301      	str	r3, [sp, #4]
    }

    HCI_Isr();
 8002e4c:	f7ff ff26 	bl	8002c9c <HCI_Isr>
    
    Enable_SPI_IRQ();
 8002e50:	f7fe fbb0 	bl	80015b4 <Enable_SPI_IRQ>
  while(1) {
 8002e54:	e7ce      	b.n	8002df4 <hci_send_req+0x5c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8002e56:	a902      	add	r1, sp, #8
 8002e58:	4648      	mov	r0, r9
 8002e5a:	f000 f8fd 	bl	8003058 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8002e5e:	9902      	ldr	r1, [sp, #8]
 8002e60:	4638      	mov	r0, r7
 8002e62:	f000 f8e2 	bl	800302a <list_insert_tail>
    HCI_Isr();
 8002e66:	f7ff ff19 	bl	8002c9c <HCI_Isr>
 8002e6a:	e7a7      	b.n	8002dbc <hci_send_req+0x24>
    switch (event_pckt->evt) {
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d017      	beq.n	8002ea0 <hci_send_req+0x108>
 8002e70:	2b3e      	cmp	r3, #62	; 0x3e
 8002e72:	d1db      	bne.n	8002e2c <hci_send_req+0x94>
      if (me->subevent != r->event)
 8002e74:	7ac8      	ldrb	r0, [r1, #11]
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	4298      	cmp	r0, r3
 8002e7a:	d1d7      	bne.n	8002e2c <hci_send_req+0x94>
      r->rlen = MIN(len, r->rlen);
 8002e7c:	6963      	ldr	r3, [r4, #20]
      len -= 1;
 8002e7e:	3a04      	subs	r2, #4
      r->rlen = MIN(len, r->rlen);
 8002e80:	429a      	cmp	r2, r3
 8002e82:	bfa8      	it	ge
 8002e84:	461a      	movge	r2, r3
 8002e86:	6162      	str	r2, [r4, #20]
      Osal_MemCpy(r->rparam, me->data, r->rlen);
 8002e88:	310c      	adds	r1, #12
 8002e8a:	e01d      	b.n	8002ec8 <hci_send_req+0x130>
      if (cs->opcode != opcode)
 8002e8c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8002e90:	42b3      	cmp	r3, r6
 8002e92:	d105      	bne.n	8002ea0 <hci_send_req+0x108>
      if (r->event != EVT_CMD_STATUS) {
 8002e94:	6863      	ldr	r3, [r4, #4]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	d00f      	beq.n	8002eba <hci_send_req+0x122>
        if (cs->status) {
 8002e9a:	7acb      	ldrb	r3, [r1, #11]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0c5      	beq.n	8002e2c <hci_send_req+0x94>
    
  }
  
failed: 
  if(hciReadPacket!=NULL){
 8002ea0:	9901      	ldr	r1, [sp, #4]
 8002ea2:	b111      	cbz	r1, 8002eaa <hci_send_req+0x112>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002ea4:	4818      	ldr	r0, [pc, #96]	; (8002f08 <hci_send_req+0x170>)
 8002ea6:	f000 f8b4 	bl	8003012 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8002eaa:	a804      	add	r0, sp, #16
 8002eac:	f7ff feb4 	bl	8002c18 <move_list.constprop.1>
  Enable_SPI_IRQ();
  return -1;
 8002eb0:	f04f 35ff 	mov.w	r5, #4294967295
  Enable_SPI_IRQ();
 8002eb4:	f7fe fb7e 	bl	80015b4 <Enable_SPI_IRQ>
  return -1;
 8002eb8:	e012      	b.n	8002ee0 <hci_send_req+0x148>
      r->rlen = MIN(len, r->rlen);
 8002eba:	6963      	ldr	r3, [r4, #20]
    len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8002ebc:	3a03      	subs	r2, #3
      r->rlen = MIN(len, r->rlen);
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	bfa8      	it	ge
 8002ec2:	461a      	movge	r2, r3
 8002ec4:	6162      	str	r2, [r4, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 8002ec6:	310b      	adds	r1, #11
      Osal_MemCpy(r->rparam, me->data, r->rlen);
 8002ec8:	6920      	ldr	r0, [r4, #16]
 8002eca:	f000 f90c 	bl	80030e6 <Osal_MemCpy>
  
done:
  // Insert the packet back into the pool.
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8002ece:	9901      	ldr	r1, [sp, #4]
 8002ed0:	480d      	ldr	r0, [pc, #52]	; (8002f08 <hci_send_req+0x170>)
 8002ed2:	f000 f89e 	bl	8003012 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8002ed6:	a804      	add	r0, sp, #16
 8002ed8:	f7ff fe9e 	bl	8002c18 <move_list.constprop.1>
  
  Enable_SPI_IRQ();
 8002edc:	f7fe fb6a 	bl	80015b4 <Enable_SPI_IRQ>
  return 0;
}
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	b007      	add	sp, #28
 8002ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (cc->opcode != opcode)
 8002ee8:	898b      	ldrh	r3, [r1, #12]
 8002eea:	42b3      	cmp	r3, r6
 8002eec:	d1d8      	bne.n	8002ea0 <hci_send_req+0x108>
      r->rlen = MIN(len, r->rlen);
 8002eee:	6963      	ldr	r3, [r4, #20]
      len -= EVT_CMD_COMPLETE_SIZE;
 8002ef0:	3a06      	subs	r2, #6
      r->rlen = MIN(len, r->rlen);
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	bfa8      	it	ge
 8002ef6:	461a      	movge	r2, r3
 8002ef8:	6162      	str	r2, [r4, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 8002efa:	310e      	adds	r1, #14
 8002efc:	e7e4      	b.n	8002ec8 <hci_send_req+0x130>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8002efe:	9901      	ldr	r1, [sp, #4]
 8002f00:	a804      	add	r0, sp, #16
 8002f02:	e79f      	b.n	8002e44 <hci_send_req+0xac>
    return 0;
 8002f04:	2500      	movs	r5, #0
 8002f06:	e7eb      	b.n	8002ee0 <hci_send_req+0x148>
 8002f08:	20000418 	.word	0x20000418
 8002f0c:	20000420 	.word	0x20000420

08002f10 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8002f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f14:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  read_local_version_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002f16:	ac01      	add	r4, sp, #4
{
 8002f18:	4680      	mov	r8, r0
 8002f1a:	460f      	mov	r7, r1
 8002f1c:	4616      	mov	r6, r2
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002f1e:	2100      	movs	r1, #0
 8002f20:	2209      	movs	r2, #9
 8002f22:	4620      	mov	r0, r4
{
 8002f24:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 8002f26:	f000 f8ee 	bl	8003106 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002f2a:	2218      	movs	r2, #24
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	a804      	add	r0, sp, #16
 8002f30:	f000 f8e9 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_INFO_PARAM;
 8002f34:	2304      	movs	r3, #4
 8002f36:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8002f3a:	2301      	movs	r3, #1
  rq.cparam = NULL;
 8002f3c:	2100      	movs	r1, #0
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8002f3e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002f42:	a804      	add	r0, sp, #16
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8002f44:	2309      	movs	r3, #9
  rq.cparam = NULL;
 8002f46:	9106      	str	r1, [sp, #24]
  rq.clen = 0;
 8002f48:	9107      	str	r1, [sp, #28]
  rq.rparam = &resp;
 8002f4a:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8002f4c:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002f4e:	f7ff ff23 	bl	8002d98 <hci_send_req>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	db1b      	blt.n	8002f8e <hci_le_read_local_version+0x7e>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8002f56:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002f5a:	b9a8      	cbnz	r0, 8002f88 <hci_le_read_local_version+0x78>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8002f5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f60:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 8002f64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002f68:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
  *manufacturer_name = btohs(resp.manufacturer_name);
 8002f6a:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_version = resp.lmp_pal_version;
 8002f6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002f70:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8002f72:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002f76:	802a      	strh	r2, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8002f78:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002f7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002f80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f86:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8002f88:	b00a      	add	sp, #40	; 0x28
 8002f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8002f8e:	20ff      	movs	r0, #255	; 0xff
 8002f90:	e7fa      	b.n	8002f88 <hci_le_read_local_version+0x78>

08002f92 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8002f92:	b570      	push	{r4, r5, r6, lr}
 8002f94:	b090      	sub	sp, #64	; 0x40
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  Osal_MemSet(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8002f96:	ac08      	add	r4, sp, #32
{
 8002f98:	4605      	mov	r5, r0
 8002f9a:	460e      	mov	r6, r1
  Osal_MemSet(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 f8b0 	bl	8003106 <Osal_MemSet>
  scan_resp_cp.length = length;
  Osal_MemCpy(scan_resp_cp.data, data, MIN(31,length));
 8002fa6:	2d1f      	cmp	r5, #31
 8002fa8:	462a      	mov	r2, r5
 8002faa:	4631      	mov	r1, r6
 8002fac:	bf28      	it	cs
 8002fae:	221f      	movcs	r2, #31
 8002fb0:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 8002fb4:	f88d 5020 	strb.w	r5, [sp, #32]
  Osal_MemCpy(scan_resp_cp.data, data, MIN(31,length));
 8002fb8:	f000 f895 	bl	80030e6 <Osal_MemCpy>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8002fbc:	2218      	movs	r2, #24
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	a802      	add	r0, sp, #8
 8002fc2:	f000 f8a0 	bl	8003106 <Osal_MemSet>
  rq.ogf = OGF_LE_CTL;
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8002fcc:	2309      	movs	r3, #9
 8002fce:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8002fd6:	f10d 0307 	add.w	r3, sp, #7
 8002fda:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002fdc:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002fde:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002fe0:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 8002fe2:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8002fe4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002fe6:	f7ff fed7 	bl	8002d98 <hci_send_req>
 8002fea:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8002fec:	bfac      	ite	ge
 8002fee:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8002ff2:	20ff      	movlt	r0, #255	; 0xff
}
 8002ff4:	b010      	add	sp, #64	; 0x40
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}

08002ff8 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8002ff8:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8002ffa:	6040      	str	r0, [r0, #4]
 8002ffc:	4770      	bx	lr

08002ffe <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ffe:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003002:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8003004:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 8003006:	1a1b      	subs	r3, r3, r0
 8003008:	4258      	negs	r0, r3
 800300a:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8003010:	4770      	bx	lr

08003012 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003016:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003018:	6802      	ldr	r2, [r0, #0]
 800301a:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800301c:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800301e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8003020:	680a      	ldr	r2, [r1, #0]
 8003022:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003024:	f383 8810 	msr	PRIMASK, r3
 8003028:	4770      	bx	lr

0800302a <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800302a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800302e:	b672      	cpsid	i

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8003030:	6842      	ldr	r2, [r0, #4]
 8003032:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8003034:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8003036:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8003038:	684a      	ldr	r2, [r1, #4]
 800303a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	f383 8810 	msr	PRIMASK, r3
 8003040:	4770      	bx	lr

08003042 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003042:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003046:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003048:	e890 0006 	ldmia.w	r0, {r1, r2}
 800304c:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 800304e:	6801      	ldr	r1, [r0, #0]
 8003050:	604a      	str	r2, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	f383 8810 	msr	PRIMASK, r3
 8003056:	4770      	bx	lr

08003058 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800305c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003062:	6803      	ldr	r3, [r0, #0]
 8003064:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8003066:	6800      	ldr	r0, [r0, #0]
 8003068:	f7ff ffeb 	bl	8003042 <list_remove_node>
  (*node)->next = NULL;
 800306c:	682a      	ldr	r2, [r5, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003072:	682a      	ldr	r2, [r5, #0]
 8003074:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	f384 8810 	msr	PRIMASK, r4
 800307a:	bd38      	pop	{r3, r4, r5, pc}

0800307c <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003080:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003084:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003086:	6843      	ldr	r3, [r0, #4]
 8003088:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 800308a:	6840      	ldr	r0, [r0, #4]
 800308c:	f7ff ffd9 	bl	8003042 <list_remove_node>
  (*node)->next = NULL;
 8003090:	682a      	ldr	r2, [r5, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003096:	682a      	ldr	r2, [r5, #0]
 8003098:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	f384 8810 	msr	PRIMASK, r4
 800309e:	bd38      	pop	{r3, r4, r5, pc}

080030a0 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80030a4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80030a6:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 80030a8:	2300      	movs	r3, #0
  while (temp != listHead)
 80030aa:	4282      	cmp	r2, r0
 80030ac:	d103      	bne.n	80030b6 <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	f381 8810 	msr	PRIMASK, r1
    temp = temp->next;		
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  return (size);
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	4770      	bx	lr
    size++;
 80030b6:	3301      	adds	r3, #1
    temp = temp->next;		
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	e7f6      	b.n	80030aa <list_get_size+0xa>

080030bc <Timer_Set>:
 * @param[in] interval  The interval before the timer expires.
 *
 */
void
Timer_Set(struct timer *t, tClockTime interval)
{
 80030bc:	b510      	push	{r4, lr}
  t->interval = interval;
 80030be:	6041      	str	r1, [r0, #4]
{
 80030c0:	4604      	mov	r4, r0
  t->start = Clock_Time();
 80030c2:	f7fe fb43 	bl	800174c <HAL_GetTick>
 80030c6:	6020      	str	r0, [r4, #0]
 80030c8:	bd10      	pop	{r4, pc}

080030ca <Timer_Expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
Timer_Expired(struct timer *t)
{
 80030ca:	b510      	push	{r4, lr}
 80030cc:	4604      	mov	r4, r0
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  tClockTime diff = (Clock_Time() - t->start) + 1;
 80030ce:	f7fe fb3d 	bl	800174c <HAL_GetTick>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	f1c3 0301 	rsb	r3, r3, #1
 80030d8:	4403      	add	r3, r0
  return t->interval < diff;
 80030da:	6860      	ldr	r0, [r4, #4]

}
 80030dc:	4283      	cmp	r3, r0
 80030de:	bf94      	ite	ls
 80030e0:	2000      	movls	r0, #0
 80030e2:	2001      	movhi	r0, #1
 80030e4:	bd10      	pop	{r4, pc}

080030e6 <Osal_MemCpy>:
 /**
 * Osal_MemCpy
 * 
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
    return(memcpy(dest,src,size)); 
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f83a 	bl	8003170 <memcpy>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <Osal_MemSet>:
/**
 * Osal_MemSet
 * 
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
    return(memset(ptr,value,size));
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f835 	bl	8003186 <memset>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4e0d      	ldr	r6, [pc, #52]	; (8003160 <__libc_init_array+0x38>)
 800312c:	4c0d      	ldr	r4, [pc, #52]	; (8003164 <__libc_init_array+0x3c>)
 800312e:	1ba4      	subs	r4, r4, r6
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	2500      	movs	r5, #0
 8003134:	42a5      	cmp	r5, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	4e0b      	ldr	r6, [pc, #44]	; (8003168 <__libc_init_array+0x40>)
 800313a:	4c0c      	ldr	r4, [pc, #48]	; (800316c <__libc_init_array+0x44>)
 800313c:	f000 f8ec 	bl	8003318 <_init>
 8003140:	1ba4      	subs	r4, r4, r6
 8003142:	10a4      	asrs	r4, r4, #2
 8003144:	2500      	movs	r5, #0
 8003146:	42a5      	cmp	r5, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003150:	4798      	blx	r3
 8003152:	3501      	adds	r5, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800315a:	4798      	blx	r3
 800315c:	3501      	adds	r5, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	08003398 	.word	0x08003398
 8003164:	08003398 	.word	0x08003398
 8003168:	08003398 	.word	0x08003398
 800316c:	0800339c 	.word	0x0800339c

08003170 <memcpy>:
 8003170:	b510      	push	{r4, lr}
 8003172:	1e43      	subs	r3, r0, #1
 8003174:	440a      	add	r2, r1
 8003176:	4291      	cmp	r1, r2
 8003178:	d100      	bne.n	800317c <memcpy+0xc>
 800317a:	bd10      	pop	{r4, pc}
 800317c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003184:	e7f7      	b.n	8003176 <memcpy+0x6>

08003186 <memset>:
 8003186:	4402      	add	r2, r0
 8003188:	4603      	mov	r3, r0
 800318a:	4293      	cmp	r3, r2
 800318c:	d100      	bne.n	8003190 <memset+0xa>
 800318e:	4770      	bx	lr
 8003190:	f803 1b01 	strb.w	r1, [r3], #1
 8003194:	e7f9      	b.n	800318a <memset+0x4>
	...

08003198 <rand>:
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <rand+0x68>)
 800319a:	b510      	push	{r4, lr}
 800319c:	681c      	ldr	r4, [r3, #0]
 800319e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031a0:	b9d3      	cbnz	r3, 80031d8 <rand+0x40>
 80031a2:	2018      	movs	r0, #24
 80031a4:	f000 f832 	bl	800320c <malloc>
 80031a8:	f243 330e 	movw	r3, #13070	; 0x330e
 80031ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80031ae:	8003      	strh	r3, [r0, #0]
 80031b0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80031b4:	8043      	strh	r3, [r0, #2]
 80031b6:	f241 2334 	movw	r3, #4660	; 0x1234
 80031ba:	8083      	strh	r3, [r0, #4]
 80031bc:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80031c0:	80c3      	strh	r3, [r0, #6]
 80031c2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80031c6:	8103      	strh	r3, [r0, #8]
 80031c8:	2305      	movs	r3, #5
 80031ca:	8143      	strh	r3, [r0, #10]
 80031cc:	230b      	movs	r3, #11
 80031ce:	8183      	strh	r3, [r0, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	2300      	movs	r3, #0
 80031d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80031d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031da:	480a      	ldr	r0, [pc, #40]	; (8003204 <rand+0x6c>)
 80031dc:	690a      	ldr	r2, [r1, #16]
 80031de:	694b      	ldr	r3, [r1, #20]
 80031e0:	4c09      	ldr	r4, [pc, #36]	; (8003208 <rand+0x70>)
 80031e2:	4350      	muls	r0, r2
 80031e4:	fb04 0003 	mla	r0, r4, r3, r0
 80031e8:	fba2 2304 	umull	r2, r3, r2, r4
 80031ec:	3201      	adds	r2, #1
 80031ee:	4403      	add	r3, r0
 80031f0:	f143 0300 	adc.w	r3, r3, #0
 80031f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80031f8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	bf00      	nop
 8003200:	20000018 	.word	0x20000018
 8003204:	5851f42d 	.word	0x5851f42d
 8003208:	4c957f2d 	.word	0x4c957f2d

0800320c <malloc>:
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <malloc+0xc>)
 800320e:	4601      	mov	r1, r0
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	f000 b803 	b.w	800321c <_malloc_r>
 8003216:	bf00      	nop
 8003218:	20000018 	.word	0x20000018

0800321c <_malloc_r>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	1ccd      	adds	r5, r1, #3
 8003220:	f025 0503 	bic.w	r5, r5, #3
 8003224:	3508      	adds	r5, #8
 8003226:	2d0c      	cmp	r5, #12
 8003228:	bf38      	it	cc
 800322a:	250c      	movcc	r5, #12
 800322c:	2d00      	cmp	r5, #0
 800322e:	4606      	mov	r6, r0
 8003230:	db01      	blt.n	8003236 <_malloc_r+0x1a>
 8003232:	42a9      	cmp	r1, r5
 8003234:	d903      	bls.n	800323e <_malloc_r+0x22>
 8003236:	230c      	movs	r3, #12
 8003238:	6033      	str	r3, [r6, #0]
 800323a:	2000      	movs	r0, #0
 800323c:	bd70      	pop	{r4, r5, r6, pc}
 800323e:	f000 f85b 	bl	80032f8 <__malloc_lock>
 8003242:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <_malloc_r+0xb4>)
 8003244:	6814      	ldr	r4, [r2, #0]
 8003246:	4621      	mov	r1, r4
 8003248:	b991      	cbnz	r1, 8003270 <_malloc_r+0x54>
 800324a:	4c22      	ldr	r4, [pc, #136]	; (80032d4 <_malloc_r+0xb8>)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	b91b      	cbnz	r3, 8003258 <_malloc_r+0x3c>
 8003250:	4630      	mov	r0, r6
 8003252:	f000 f841 	bl	80032d8 <_sbrk_r>
 8003256:	6020      	str	r0, [r4, #0]
 8003258:	4629      	mov	r1, r5
 800325a:	4630      	mov	r0, r6
 800325c:	f000 f83c 	bl	80032d8 <_sbrk_r>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d126      	bne.n	80032b2 <_malloc_r+0x96>
 8003264:	230c      	movs	r3, #12
 8003266:	6033      	str	r3, [r6, #0]
 8003268:	4630      	mov	r0, r6
 800326a:	f000 f846 	bl	80032fa <__malloc_unlock>
 800326e:	e7e4      	b.n	800323a <_malloc_r+0x1e>
 8003270:	680b      	ldr	r3, [r1, #0]
 8003272:	1b5b      	subs	r3, r3, r5
 8003274:	d41a      	bmi.n	80032ac <_malloc_r+0x90>
 8003276:	2b0b      	cmp	r3, #11
 8003278:	d90f      	bls.n	800329a <_malloc_r+0x7e>
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	50cd      	str	r5, [r1, r3]
 800327e:	18cc      	adds	r4, r1, r3
 8003280:	4630      	mov	r0, r6
 8003282:	f000 f83a 	bl	80032fa <__malloc_unlock>
 8003286:	f104 000b 	add.w	r0, r4, #11
 800328a:	1d23      	adds	r3, r4, #4
 800328c:	f020 0007 	bic.w	r0, r0, #7
 8003290:	1ac3      	subs	r3, r0, r3
 8003292:	d01b      	beq.n	80032cc <_malloc_r+0xb0>
 8003294:	425a      	negs	r2, r3
 8003296:	50e2      	str	r2, [r4, r3]
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	428c      	cmp	r4, r1
 800329c:	bf0d      	iteet	eq
 800329e:	6863      	ldreq	r3, [r4, #4]
 80032a0:	684b      	ldrne	r3, [r1, #4]
 80032a2:	6063      	strne	r3, [r4, #4]
 80032a4:	6013      	streq	r3, [r2, #0]
 80032a6:	bf18      	it	ne
 80032a8:	460c      	movne	r4, r1
 80032aa:	e7e9      	b.n	8003280 <_malloc_r+0x64>
 80032ac:	460c      	mov	r4, r1
 80032ae:	6849      	ldr	r1, [r1, #4]
 80032b0:	e7ca      	b.n	8003248 <_malloc_r+0x2c>
 80032b2:	1cc4      	adds	r4, r0, #3
 80032b4:	f024 0403 	bic.w	r4, r4, #3
 80032b8:	42a0      	cmp	r0, r4
 80032ba:	d005      	beq.n	80032c8 <_malloc_r+0xac>
 80032bc:	1a21      	subs	r1, r4, r0
 80032be:	4630      	mov	r0, r6
 80032c0:	f000 f80a 	bl	80032d8 <_sbrk_r>
 80032c4:	3001      	adds	r0, #1
 80032c6:	d0cd      	beq.n	8003264 <_malloc_r+0x48>
 80032c8:	6025      	str	r5, [r4, #0]
 80032ca:	e7d9      	b.n	8003280 <_malloc_r+0x64>
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	bf00      	nop
 80032d0:	20000384 	.word	0x20000384
 80032d4:	20000388 	.word	0x20000388

080032d8 <_sbrk_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4c06      	ldr	r4, [pc, #24]	; (80032f4 <_sbrk_r+0x1c>)
 80032dc:	2300      	movs	r3, #0
 80032de:	4605      	mov	r5, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	6023      	str	r3, [r4, #0]
 80032e4:	f000 f80a 	bl	80032fc <_sbrk>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_sbrk_r+0x1a>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_sbrk_r+0x1a>
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	20000428 	.word	0x20000428

080032f8 <__malloc_lock>:
 80032f8:	4770      	bx	lr

080032fa <__malloc_unlock>:
 80032fa:	4770      	bx	lr

080032fc <_sbrk>:
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <_sbrk+0x14>)
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	4602      	mov	r2, r0
 8003302:	b909      	cbnz	r1, 8003308 <_sbrk+0xc>
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <_sbrk+0x18>)
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	4402      	add	r2, r0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	4770      	bx	lr
 8003310:	2000038c 	.word	0x2000038c
 8003314:	20000430 	.word	0x20000430

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
